// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Addresses addresses
//
// swagger:model Addresses
type Addresses struct {

	// addresses
	// Required: true
	Addresses []Address `json:"addresses"`

	// base req
	// Required: true
	BaseReq *BaseReq `json:"base_req"`
}

// Validate validates this addresses
func (m *Addresses) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Addresses) validateAddresses(formats strfmt.Registry) error {

	if err := validate.Required("addresses", "body", m.Addresses); err != nil {
		return err
	}

	for i := 0; i < len(m.Addresses); i++ {

		if err := m.Addresses[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Addresses) validateBaseReq(formats strfmt.Registry) error {

	if err := validate.Required("base_req", "body", m.BaseReq); err != nil {
		return err
	}

	if m.BaseReq != nil {
		if err := m.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_req")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Addresses) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Addresses) UnmarshalBinary(b []byte) error {
	var res Addresses
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
