// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlockID block ID
//
// swagger:model BlockID
type BlockID struct {

	// hash
	// Required: true
	Hash Hash `json:"hash"`

	// parts
	// Required: true
	Parts *BlockIDParts `json:"parts"`
}

// Validate validates this block ID
func (m *BlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockID) validateHash(formats strfmt.Registry) error {

	if err := m.Hash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hash")
		}
		return err
	}

	return nil
}

func (m *BlockID) validateParts(formats strfmt.Registry) error {

	if err := validate.Required("parts", "body", m.Parts); err != nil {
		return err
	}

	if m.Parts != nil {
		if err := m.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockID) UnmarshalBinary(b []byte) error {
	var res BlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockIDParts block ID parts
//
// swagger:model BlockIDParts
type BlockIDParts struct {

	// hash
	Hash Hash `json:"hash,omitempty"`

	// total
	Total float64 `json:"total,omitempty"`
}

// Validate validates this block ID parts
func (m *BlockIDParts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockIDParts) validateHash(formats strfmt.Registry) error {

	if swag.IsZero(m.Hash) { // not required
		return nil
	}

	if err := m.Hash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parts" + "." + "hash")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockIDParts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockIDParts) UnmarshalBinary(b []byte) error {
	var res BlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
