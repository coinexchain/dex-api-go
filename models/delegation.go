// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Delegation delegation
//
// swagger:model Delegation
type Delegation struct {

	// balance
	// Required: true
	Balance *string `json:"balance"`

	// delegator address
	// Required: true
	DelegatorAddress *string `json:"delegator_address"`

	// shares
	// Required: true
	Shares *string `json:"shares"`

	// validator address
	// Required: true
	ValidatorAddress *string `json:"validator_address"`
}

// Validate validates this delegation
func (m *Delegation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelegatorAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidatorAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Delegation) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

func (m *Delegation) validateDelegatorAddress(formats strfmt.Registry) error {

	if err := validate.Required("delegator_address", "body", m.DelegatorAddress); err != nil {
		return err
	}

	return nil
}

func (m *Delegation) validateShares(formats strfmt.Registry) error {

	if err := validate.Required("shares", "body", m.Shares); err != nil {
		return err
	}

	return nil
}

func (m *Delegation) validateValidatorAddress(formats strfmt.Registry) error {

	if err := validate.Required("validator_address", "body", m.ValidatorAddress); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Delegation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Delegation) UnmarshalBinary(b []byte) error {
	var res Delegation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
