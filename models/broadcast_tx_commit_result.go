// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BroadcastTxCommitResult broadcast tx commit result
//
// swagger:model BroadcastTxCommitResult
type BroadcastTxCommitResult struct {

	// code
	Code int64 `json:"code,omitempty"`

	// codespace
	Codespace string `json:"codespace,omitempty"`

	// data
	Data string `json:"data,omitempty"`

	// events
	Events []*BroadcastTxCommitResultEventsItems0 `json:"events"`

	// gas used
	GasUsed string `json:"gas_used,omitempty"`

	// gas wanted
	GasWanted string `json:"gas_wanted,omitempty"`

	// height
	Height string `json:"height,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// logs
	Logs []*BroadcastTxCommitResultLogsItems0 `json:"logs"`

	// raw log
	RawLog string `json:"raw_log,omitempty"`

	// timestamp
	Timestamp string `json:"timestamp,omitempty"`

	// tx
	Tx interface{} `json:"tx,omitempty"`

	// txhash
	Txhash Hash `json:"txhash,omitempty"`
}

// Validate validates this broadcast tx commit result
func (m *BroadcastTxCommitResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxhash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BroadcastTxCommitResult) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BroadcastTxCommitResult) validateLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.Logs) { // not required
		return nil
	}

	for i := 0; i < len(m.Logs); i++ {
		if swag.IsZero(m.Logs[i]) { // not required
			continue
		}

		if m.Logs[i] != nil {
			if err := m.Logs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BroadcastTxCommitResult) validateTxhash(formats strfmt.Registry) error {

	if swag.IsZero(m.Txhash) { // not required
		return nil
	}

	if err := m.Txhash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txhash")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastTxCommitResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastTxCommitResult) UnmarshalBinary(b []byte) error {
	var res BroadcastTxCommitResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BroadcastTxCommitResultEventsItems0 broadcast tx commit result events items0
//
// swagger:model BroadcastTxCommitResultEventsItems0
type BroadcastTxCommitResultEventsItems0 struct {

	// attributes
	Attributes []*BroadcastTxCommitResultEventsItems0AttributesItems0 `json:"attributes"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this broadcast tx commit result events items0
func (m *BroadcastTxCommitResultEventsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BroadcastTxCommitResultEventsItems0) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastTxCommitResultEventsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastTxCommitResultEventsItems0) UnmarshalBinary(b []byte) error {
	var res BroadcastTxCommitResultEventsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BroadcastTxCommitResultEventsItems0AttributesItems0 broadcast tx commit result events items0 attributes items0
//
// swagger:model BroadcastTxCommitResultEventsItems0AttributesItems0
type BroadcastTxCommitResultEventsItems0AttributesItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this broadcast tx commit result events items0 attributes items0
func (m *BroadcastTxCommitResultEventsItems0AttributesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastTxCommitResultEventsItems0AttributesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastTxCommitResultEventsItems0AttributesItems0) UnmarshalBinary(b []byte) error {
	var res BroadcastTxCommitResultEventsItems0AttributesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BroadcastTxCommitResultLogsItems0 broadcast tx commit result logs items0
//
// swagger:model BroadcastTxCommitResultLogsItems0
type BroadcastTxCommitResultLogsItems0 struct {

	// log
	Log string `json:"log,omitempty"`

	// msg index
	MsgIndex int64 `json:"msg_index,omitempty"`

	// success
	Success bool `json:"success,omitempty"`
}

// Validate validates this broadcast tx commit result logs items0
func (m *BroadcastTxCommitResultLogsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastTxCommitResultLogsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastTxCommitResultLogsItems0) UnmarshalBinary(b []byte) error {
	var res BroadcastTxCommitResultLogsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
