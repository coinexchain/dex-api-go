// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order order
//
// swagger:model Order
type Order struct {

	// A transaction can contain multiple order creation messages, the identify field was added to the order creation message to give each order a unique ID. So the order ID consists of user address, user sequence, identify.
	// Required: true
	Identify *int64 `json:"identify"`

	// The identify of the price limit : 2; (Currently, only price limit orders are supported)
	// Required: true
	OrderType *int64 `json:"order_type"`

	// price
	// Required: true
	Price *string `json:"price"`

	// price precision
	PricePrecision string `json:"price_precision,omitempty"`

	// quantity
	// Required: true
	Quantity *string `json:"quantity"`

	// The buying or selling direction of an order.(buy : 1; sell : 2)
	// Required: true
	Side *int64 `json:"side"`

	// trading pair
	// Required: true
	TradingPair *string `json:"trading_pair"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSide(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTradingPair(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) validateIdentify(formats strfmt.Registry) error {

	if err := validate.Required("identify", "body", m.Identify); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateOrderType(formats strfmt.Registry) error {

	if err := validate.Required("order_type", "body", m.OrderType); err != nil {
		return err
	}

	return nil
}

func (m *Order) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateSide(formats strfmt.Registry) error {

	if err := validate.Required("side", "body", m.Side); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateTradingPair(formats strfmt.Registry) error {

	if err := validate.Required("trading_pair", "body", m.TradingPair); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
