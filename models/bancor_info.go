// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BancorInfo bancor info
//
// swagger:model BancorInfo
type BancorInfo struct {

	// ar
	// Required: true
	Ar *string `json:"ar"`

	// current price
	// Required: true
	CurrentPrice *string `json:"current_price"`

	// earliest cancel time
	// Required: true
	EarliestCancelTime *string `json:"earliest_cancel_time"`

	// init price
	// Required: true
	InitPrice *string `json:"init_price"`

	// max money
	// Required: true
	MaxMoney *string `json:"max_money"`

	// max price
	// Required: true
	MaxPrice *string `json:"max_price"`

	// max supply
	// Required: true
	MaxSupply *string `json:"max_supply"`

	// money
	// Required: true
	Money *string `json:"money"`

	// money in pool
	// Required: true
	MoneyInPool *string `json:"money_in_pool"`

	// owner
	// Required: true
	Owner *string `json:"owner"`

	// stock
	// Required: true
	Stock *string `json:"stock"`

	// stock in pool
	// Required: true
	StockInPool *string `json:"stock_in_pool"`

	// stock precision
	StockPrecision string `json:"stock_precision,omitempty"`
}

// Validate validates this bancor info
func (m *BancorInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEarliestCancelTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxSupply(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoneyInPool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockInPool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BancorInfo) validateAr(formats strfmt.Registry) error {

	if err := validate.Required("ar", "body", m.Ar); err != nil {
		return err
	}

	return nil
}

func (m *BancorInfo) validateCurrentPrice(formats strfmt.Registry) error {

	if err := validate.Required("current_price", "body", m.CurrentPrice); err != nil {
		return err
	}

	return nil
}

func (m *BancorInfo) validateEarliestCancelTime(formats strfmt.Registry) error {

	if err := validate.Required("earliest_cancel_time", "body", m.EarliestCancelTime); err != nil {
		return err
	}

	return nil
}

func (m *BancorInfo) validateInitPrice(formats strfmt.Registry) error {

	if err := validate.Required("init_price", "body", m.InitPrice); err != nil {
		return err
	}

	return nil
}

func (m *BancorInfo) validateMaxMoney(formats strfmt.Registry) error {

	if err := validate.Required("max_money", "body", m.MaxMoney); err != nil {
		return err
	}

	return nil
}

func (m *BancorInfo) validateMaxPrice(formats strfmt.Registry) error {

	if err := validate.Required("max_price", "body", m.MaxPrice); err != nil {
		return err
	}

	return nil
}

func (m *BancorInfo) validateMaxSupply(formats strfmt.Registry) error {

	if err := validate.Required("max_supply", "body", m.MaxSupply); err != nil {
		return err
	}

	return nil
}

func (m *BancorInfo) validateMoney(formats strfmt.Registry) error {

	if err := validate.Required("money", "body", m.Money); err != nil {
		return err
	}

	return nil
}

func (m *BancorInfo) validateMoneyInPool(formats strfmt.Registry) error {

	if err := validate.Required("money_in_pool", "body", m.MoneyInPool); err != nil {
		return err
	}

	return nil
}

func (m *BancorInfo) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	return nil
}

func (m *BancorInfo) validateStock(formats strfmt.Registry) error {

	if err := validate.Required("stock", "body", m.Stock); err != nil {
		return err
	}

	return nil
}

func (m *BancorInfo) validateStockInPool(formats strfmt.Registry) error {

	if err := validate.Required("stock_in_pool", "body", m.StockInPool); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BancorInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BancorInfo) UnmarshalBinary(b []byte) error {
	var res BancorInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
