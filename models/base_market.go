// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseMarket base market
//
// swagger:model BaseMarket
type BaseMarket struct {

	// money
	// Required: true
	Money *string `json:"money"`

	// To control the granularity of token trade, the token amount of trade must be a multiple of granularity.
	OrderPrecision string `json:"order_precision,omitempty"`

	// The trading-pair price precision, used to control the price accuracy of the order when token trades, valid range [0, 18]
	// Required: true
	PricePrecision *string `json:"price_precision"`

	// stock
	// Required: true
	Stock *string `json:"stock"`
}

// Validate validates this base market
func (m *BaseMarket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricePrecision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseMarket) validateMoney(formats strfmt.Registry) error {

	if err := validate.Required("money", "body", m.Money); err != nil {
		return err
	}

	return nil
}

func (m *BaseMarket) validatePricePrecision(formats strfmt.Registry) error {

	if err := validate.Required("price_precision", "body", m.PricePrecision); err != nil {
		return err
	}

	return nil
}

func (m *BaseMarket) validateStock(formats strfmt.Registry) error {

	if err := validate.Required("stock", "body", m.Stock); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseMarket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseMarket) UnmarshalBinary(b []byte) error {
	var res BaseMarket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
