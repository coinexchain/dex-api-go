// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserOrder user order
//
// swagger:model UserOrder
type UserOrder struct {

	// cancel order info
	CancelOrderInfo *UserOrderCancelOrderInfo `json:"cancelOrderInfo,omitempty"`

	// create order info
	CreateOrderInfo *UserOrderCreateOrderInfo `json:"createOrderInfo,omitempty"`

	// fill order info
	FillOrderInfo *UserOrderFillOrderInfo `json:"fillOrderInfo,omitempty"`
}

// Validate validates this user order
func (m *UserOrder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCancelOrderInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateOrderInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFillOrderInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserOrder) validateCancelOrderInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CancelOrderInfo) { // not required
		return nil
	}

	if m.CancelOrderInfo != nil {
		if err := m.CancelOrderInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancelOrderInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UserOrder) validateCreateOrderInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateOrderInfo) { // not required
		return nil
	}

	if m.CreateOrderInfo != nil {
		if err := m.CreateOrderInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UserOrder) validateFillOrderInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.FillOrderInfo) { // not required
		return nil
	}

	if m.FillOrderInfo != nil {
		if err := m.FillOrderInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fillOrderInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserOrder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserOrder) UnmarshalBinary(b []byte) error {
	var res UserOrder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserOrderCancelOrderInfo user order cancel order info
//
// swagger:model UserOrderCancelOrderInfo
type UserOrderCancelOrderInfo struct {

	// data
	Data []*CancelOrderInfo `json:"data"`

	// timesid
	Timesid []int64 `json:"timesid"`
}

// Validate validates this user order cancel order info
func (m *UserOrderCancelOrderInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserOrderCancelOrderInfo) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cancelOrderInfo" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserOrderCancelOrderInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserOrderCancelOrderInfo) UnmarshalBinary(b []byte) error {
	var res UserOrderCancelOrderInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserOrderCreateOrderInfo user order create order info
//
// swagger:model UserOrderCreateOrderInfo
type UserOrderCreateOrderInfo struct {

	// data
	Data []*CreateOrderInfo `json:"data"`

	// timesid
	Timesid []int64 `json:"timesid"`
}

// Validate validates this user order create order info
func (m *UserOrderCreateOrderInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserOrderCreateOrderInfo) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrderInfo" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserOrderCreateOrderInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserOrderCreateOrderInfo) UnmarshalBinary(b []byte) error {
	var res UserOrderCreateOrderInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserOrderFillOrderInfo user order fill order info
//
// swagger:model UserOrderFillOrderInfo
type UserOrderFillOrderInfo struct {

	// data
	Data []*FillOrderInfo `json:"data"`

	// timesid
	Timesid []int64 `json:"timesid"`
}

// Validate validates this user order fill order info
func (m *UserOrderFillOrderInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserOrderFillOrderInfo) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fillOrderInfo" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserOrderFillOrderInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserOrderFillOrderInfo) UnmarshalBinary(b []byte) error {
	var res UserOrderFillOrderInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
