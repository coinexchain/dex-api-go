// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueToken issue token
//
// swagger:model IssueToken
type IssueToken struct {

	// addr forbiddable
	// Required: true
	AddrForbiddable *bool `json:"addr_forbiddable"`

	// base req
	// Required: true
	BaseReq *BaseReq `json:"base_req"`

	// burnable
	// Required: true
	Burnable *bool `json:"burnable"`

	// description
	Description string `json:"description,omitempty"`

	// identity
	Identity string `json:"identity,omitempty"`

	// mintable
	// Required: true
	Mintable *bool `json:"mintable"`

	// name
	// Required: true
	Name *string `json:"name"`

	// owner
	Owner Address `json:"owner,omitempty"`

	// symbol
	// Required: true
	Symbol *string `json:"symbol"`

	// token forbiddable
	// Required: true
	TokenForbiddable *bool `json:"token_forbiddable"`

	// total supply
	// Required: true
	TotalSupply *string `json:"total_supply"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this issue token
func (m *IssueToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddrForbiddable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBurnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMintable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenForbiddable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSupply(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueToken) validateAddrForbiddable(formats strfmt.Registry) error {

	if err := validate.Required("addr_forbiddable", "body", m.AddrForbiddable); err != nil {
		return err
	}

	return nil
}

func (m *IssueToken) validateBaseReq(formats strfmt.Registry) error {

	if err := validate.Required("base_req", "body", m.BaseReq); err != nil {
		return err
	}

	if m.BaseReq != nil {
		if err := m.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_req")
			}
			return err
		}
	}

	return nil
}

func (m *IssueToken) validateBurnable(formats strfmt.Registry) error {

	if err := validate.Required("burnable", "body", m.Burnable); err != nil {
		return err
	}

	return nil
}

func (m *IssueToken) validateMintable(formats strfmt.Registry) error {

	if err := validate.Required("mintable", "body", m.Mintable); err != nil {
		return err
	}

	return nil
}

func (m *IssueToken) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IssueToken) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if err := m.Owner.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("owner")
		}
		return err
	}

	return nil
}

func (m *IssueToken) validateSymbol(formats strfmt.Registry) error {

	if err := validate.Required("symbol", "body", m.Symbol); err != nil {
		return err
	}

	return nil
}

func (m *IssueToken) validateTokenForbiddable(formats strfmt.Registry) error {

	if err := validate.Required("token_forbiddable", "body", m.TokenForbiddable); err != nil {
		return err
	}

	return nil
}

func (m *IssueToken) validateTotalSupply(formats strfmt.Registry) error {

	if err := validate.Required("total_supply", "body", m.TotalSupply); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueToken) UnmarshalBinary(b []byte) error {
	var res IssueToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
