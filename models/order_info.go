// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrderInfo order info
//
// swagger:model OrderInfo
type OrderInfo struct {
	Order

	// deal money
	DealMoney string `json:"DealMoney,omitempty"`

	// deal stock
	DealStock string `json:"DealStock,omitempty"`

	// freeze
	Freeze string `json:"freeze,omitempty"`

	// frozen fee
	FrozenFee string `json:"frozen_fee,omitempty"`

	// height
	Height string `json:"height,omitempty"`

	// left stock
	LeftStock string `json:"left_stock,omitempty"`

	// sender
	Sender string `json:"sender,omitempty"`

	// sequence
	Sequence string `json:"sequence,omitempty"`

	// time in force
	TimeInForce string `json:"time_in_force,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OrderInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Order
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Order = aO0

	// AO1
	var dataAO1 struct {
		DealMoney string `json:"DealMoney,omitempty"`

		DealStock string `json:"DealStock,omitempty"`

		Freeze string `json:"freeze,omitempty"`

		FrozenFee string `json:"frozen_fee,omitempty"`

		Height string `json:"height,omitempty"`

		LeftStock string `json:"left_stock,omitempty"`

		Sender string `json:"sender,omitempty"`

		Sequence string `json:"sequence,omitempty"`

		TimeInForce string `json:"time_in_force,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DealMoney = dataAO1.DealMoney

	m.DealStock = dataAO1.DealStock

	m.Freeze = dataAO1.Freeze

	m.FrozenFee = dataAO1.FrozenFee

	m.Height = dataAO1.Height

	m.LeftStock = dataAO1.LeftStock

	m.Sender = dataAO1.Sender

	m.Sequence = dataAO1.Sequence

	m.TimeInForce = dataAO1.TimeInForce

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OrderInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Order)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DealMoney string `json:"DealMoney,omitempty"`

		DealStock string `json:"DealStock,omitempty"`

		Freeze string `json:"freeze,omitempty"`

		FrozenFee string `json:"frozen_fee,omitempty"`

		Height string `json:"height,omitempty"`

		LeftStock string `json:"left_stock,omitempty"`

		Sender string `json:"sender,omitempty"`

		Sequence string `json:"sequence,omitempty"`

		TimeInForce string `json:"time_in_force,omitempty"`
	}

	dataAO1.DealMoney = m.DealMoney

	dataAO1.DealStock = m.DealStock

	dataAO1.Freeze = m.Freeze

	dataAO1.FrozenFee = m.FrozenFee

	dataAO1.Height = m.Height

	dataAO1.LeftStock = m.LeftStock

	dataAO1.Sender = m.Sender

	dataAO1.Sequence = m.Sequence

	dataAO1.TimeInForce = m.TimeInForce

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this order info
func (m *OrderInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Order
	if err := m.Order.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *OrderInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderInfo) UnmarshalBinary(b []byte) error {
	var res OrderInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
