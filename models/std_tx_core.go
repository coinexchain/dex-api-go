// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StdTxCore std tx core
//
// swagger:model StdTxCore
type StdTxCore struct {

	// fee
	// Required: true
	Fee *StdTxCoreFee `json:"fee"`

	// memo
	// Required: true
	Memo *string `json:"memo"`

	// msg
	Msg []Msg `json:"msg"`

	// signatures
	// Required: true
	Signatures []*StdTxCoreSignaturesItems0 `json:"signatures"`
}

// Validate validates this std tx core
func (m *StdTxCore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatures(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StdTxCore) validateFee(formats strfmt.Registry) error {

	if err := validate.Required("fee", "body", m.Fee); err != nil {
		return err
	}

	if m.Fee != nil {
		if err := m.Fee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fee")
			}
			return err
		}
	}

	return nil
}

func (m *StdTxCore) validateMemo(formats strfmt.Registry) error {

	if err := validate.Required("memo", "body", m.Memo); err != nil {
		return err
	}

	return nil
}

func (m *StdTxCore) validateSignatures(formats strfmt.Registry) error {

	if err := validate.Required("signatures", "body", m.Signatures); err != nil {
		return err
	}

	for i := 0; i < len(m.Signatures); i++ {
		if swag.IsZero(m.Signatures[i]) { // not required
			continue
		}

		if m.Signatures[i] != nil {
			if err := m.Signatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StdTxCore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StdTxCore) UnmarshalBinary(b []byte) error {
	var res StdTxCore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StdTxCoreFee std tx core fee
//
// swagger:model StdTxCoreFee
type StdTxCoreFee struct {

	// amount
	Amount []*Coin `json:"amount"`

	// gas
	Gas string `json:"gas,omitempty"`
}

// Validate validates this std tx core fee
func (m *StdTxCoreFee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StdTxCoreFee) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	for i := 0; i < len(m.Amount); i++ {
		if swag.IsZero(m.Amount[i]) { // not required
			continue
		}

		if m.Amount[i] != nil {
			if err := m.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StdTxCoreFee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StdTxCoreFee) UnmarshalBinary(b []byte) error {
	var res StdTxCoreFee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StdTxCoreSignaturesItems0 std tx core signatures items0
//
// swagger:model StdTxCoreSignaturesItems0
type StdTxCoreSignaturesItems0 struct {

	// pub key
	PubKey *StdTxCoreSignaturesItems0PubKey `json:"pub_key,omitempty"`

	// signature
	Signature string `json:"signature,omitempty"`
}

// Validate validates this std tx core signatures items0
func (m *StdTxCoreSignaturesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePubKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StdTxCoreSignaturesItems0) validatePubKey(formats strfmt.Registry) error {

	if swag.IsZero(m.PubKey) { // not required
		return nil
	}

	if m.PubKey != nil {
		if err := m.PubKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pub_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StdTxCoreSignaturesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StdTxCoreSignaturesItems0) UnmarshalBinary(b []byte) error {
	var res StdTxCoreSignaturesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StdTxCoreSignaturesItems0PubKey std tx core signatures items0 pub key
//
// swagger:model StdTxCoreSignaturesItems0PubKey
type StdTxCoreSignaturesItems0PubKey struct {

	// type
	Type string `json:"type,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this std tx core signatures items0 pub key
func (m *StdTxCoreSignaturesItems0PubKey) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StdTxCoreSignaturesItems0PubKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StdTxCoreSignaturesItems0PubKey) UnmarshalBinary(b []byte) error {
	var res StdTxCoreSignaturesItems0PubKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
