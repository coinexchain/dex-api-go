// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Locked locked
//
// swagger:model Locked
type Locked struct {

	// amount
	Amount *Coin `json:"amount,omitempty"`

	// from address
	FromAddress Address `json:"from_address,omitempty"`

	// to address
	ToAddress Address `json:"to_Address,omitempty"`

	// The tx hash
	TxHash string `json:"tx_hash,omitempty"`

	// The unix timestamp when tokens can transfer again
	UnlockTime int64 `json:"unlock_time,omitempty"`
}

// Validate validates this locked
func (m *Locked) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Locked) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *Locked) validateFromAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.FromAddress) { // not required
		return nil
	}

	if err := m.FromAddress.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("from_address")
		}
		return err
	}

	return nil
}

func (m *Locked) validateToAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.ToAddress) { // not required
		return nil
	}

	if err := m.ToAddress.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("to_Address")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Locked) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Locked) UnmarshalBinary(b []byte) error {
	var res Locked
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
