// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TallyResult tally result
//
// swagger:model TallyResult
type TallyResult struct {

	// abstain
	// Required: true
	Abstain *string `json:"abstain"`

	// no
	// Required: true
	No *string `json:"no"`

	// no with veto
	// Required: true
	NoWithVeto *string `json:"no_with_veto"`

	// yes
	// Required: true
	Yes *string `json:"yes"`
}

// Validate validates this tally result
func (m *TallyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbstain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoWithVeto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TallyResult) validateAbstain(formats strfmt.Registry) error {

	if err := validate.Required("abstain", "body", m.Abstain); err != nil {
		return err
	}

	return nil
}

func (m *TallyResult) validateNo(formats strfmt.Registry) error {

	if err := validate.Required("no", "body", m.No); err != nil {
		return err
	}

	return nil
}

func (m *TallyResult) validateNoWithVeto(formats strfmt.Registry) error {

	if err := validate.Required("no_with_veto", "body", m.NoWithVeto); err != nil {
		return err
	}

	return nil
}

func (m *TallyResult) validateYes(formats strfmt.Registry) error {

	if err := validate.Required("yes", "body", m.Yes); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TallyResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TallyResult) UnmarshalBinary(b []byte) error {
	var res TallyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
