// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Validator validator
//
// swagger:model Validator
type Validator struct {

	// commission
	// Required: true
	Commission *ValidatorCommission `json:"commission"`

	// consensus pubkey
	// Required: true
	ConsensusPubkey *string `json:"consensus_pubkey"`

	// delegator shares
	// Required: true
	DelegatorShares *string `json:"delegator_shares"`

	// description
	// Required: true
	Description *ValidatorDescription `json:"description"`

	// jailed
	// Required: true
	Jailed *bool `json:"jailed"`

	// min self delegation
	// Required: true
	MinSelfDelegation *string `json:"min_self_delegation"`

	// operator address
	// Required: true
	OperatorAddress ValidatorAddress `json:"operator_address"`

	// status
	// Required: true
	Status *int64 `json:"status"`

	// tokens
	// Required: true
	Tokens *string `json:"tokens"`

	// unbonding height
	// Required: true
	UnbondingHeight *string `json:"unbonding_height"`

	// unbonding time
	// Required: true
	UnbondingTime *string `json:"unbonding_time"`
}

// Validate validates this validator
func (m *Validator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsensusPubkey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelegatorShares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinSelfDelegation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokens(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnbondingHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnbondingTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Validator) validateCommission(formats strfmt.Registry) error {

	if err := validate.Required("commission", "body", m.Commission); err != nil {
		return err
	}

	if m.Commission != nil {
		if err := m.Commission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission")
			}
			return err
		}
	}

	return nil
}

func (m *Validator) validateConsensusPubkey(formats strfmt.Registry) error {

	if err := validate.Required("consensus_pubkey", "body", m.ConsensusPubkey); err != nil {
		return err
	}

	return nil
}

func (m *Validator) validateDelegatorShares(formats strfmt.Registry) error {

	if err := validate.Required("delegator_shares", "body", m.DelegatorShares); err != nil {
		return err
	}

	return nil
}

func (m *Validator) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *Validator) validateJailed(formats strfmt.Registry) error {

	if err := validate.Required("jailed", "body", m.Jailed); err != nil {
		return err
	}

	return nil
}

func (m *Validator) validateMinSelfDelegation(formats strfmt.Registry) error {

	if err := validate.Required("min_self_delegation", "body", m.MinSelfDelegation); err != nil {
		return err
	}

	return nil
}

func (m *Validator) validateOperatorAddress(formats strfmt.Registry) error {

	if err := m.OperatorAddress.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operator_address")
		}
		return err
	}

	return nil
}

func (m *Validator) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Validator) validateTokens(formats strfmt.Registry) error {

	if err := validate.Required("tokens", "body", m.Tokens); err != nil {
		return err
	}

	return nil
}

func (m *Validator) validateUnbondingHeight(formats strfmt.Registry) error {

	if err := validate.Required("unbonding_height", "body", m.UnbondingHeight); err != nil {
		return err
	}

	return nil
}

func (m *Validator) validateUnbondingTime(formats strfmt.Registry) error {

	if err := validate.Required("unbonding_time", "body", m.UnbondingTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Validator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Validator) UnmarshalBinary(b []byte) error {
	var res Validator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ValidatorCommission validator commission
//
// swagger:model ValidatorCommission
type ValidatorCommission struct {

	// commission rates
	// Required: true
	CommissionRates *ValidatorCommissionCommissionRates `json:"commission_rates"`

	// update time
	// Required: true
	UpdateTime *string `json:"update_time"`
}

// Validate validates this validator commission
func (m *ValidatorCommission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommissionRates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidatorCommission) validateCommissionRates(formats strfmt.Registry) error {

	if err := validate.Required("commission"+"."+"commission_rates", "body", m.CommissionRates); err != nil {
		return err
	}

	if m.CommissionRates != nil {
		if err := m.CommissionRates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission" + "." + "commission_rates")
			}
			return err
		}
	}

	return nil
}

func (m *ValidatorCommission) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("commission"+"."+"update_time", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorCommission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorCommission) UnmarshalBinary(b []byte) error {
	var res ValidatorCommission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ValidatorCommissionCommissionRates validator commission commission rates
//
// swagger:model ValidatorCommissionCommissionRates
type ValidatorCommissionCommissionRates struct {

	// max change rate
	// Required: true
	MaxChangeRate *string `json:"max_change_rate"`

	// max rate
	// Required: true
	MaxRate *string `json:"max_rate"`

	// rate
	// Required: true
	Rate *string `json:"rate"`
}

// Validate validates this validator commission commission rates
func (m *ValidatorCommissionCommissionRates) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxChangeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidatorCommissionCommissionRates) validateMaxChangeRate(formats strfmt.Registry) error {

	if err := validate.Required("commission"+"."+"commission_rates"+"."+"max_change_rate", "body", m.MaxChangeRate); err != nil {
		return err
	}

	return nil
}

func (m *ValidatorCommissionCommissionRates) validateMaxRate(formats strfmt.Registry) error {

	if err := validate.Required("commission"+"."+"commission_rates"+"."+"max_rate", "body", m.MaxRate); err != nil {
		return err
	}

	return nil
}

func (m *ValidatorCommissionCommissionRates) validateRate(formats strfmt.Registry) error {

	if err := validate.Required("commission"+"."+"commission_rates"+"."+"rate", "body", m.Rate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorCommissionCommissionRates) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorCommissionCommissionRates) UnmarshalBinary(b []byte) error {
	var res ValidatorCommissionCommissionRates
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ValidatorDescription validator description
//
// swagger:model ValidatorDescription
type ValidatorDescription struct {

	// details
	// Required: true
	Details *string `json:"details"`

	// identity
	// Required: true
	Identity *string `json:"identity"`

	// moniker
	// Required: true
	Moniker *string `json:"moniker"`

	// website
	// Required: true
	Website *string `json:"website"`
}

// Validate validates this validator description
func (m *ValidatorDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoniker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebsite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidatorDescription) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("description"+"."+"details", "body", m.Details); err != nil {
		return err
	}

	return nil
}

func (m *ValidatorDescription) validateIdentity(formats strfmt.Registry) error {

	if err := validate.Required("description"+"."+"identity", "body", m.Identity); err != nil {
		return err
	}

	return nil
}

func (m *ValidatorDescription) validateMoniker(formats strfmt.Registry) error {

	if err := validate.Required("description"+"."+"moniker", "body", m.Moniker); err != nil {
		return err
	}

	return nil
}

func (m *ValidatorDescription) validateWebsite(formats strfmt.Registry) error {

	if err := validate.Required("description"+"."+"website", "body", m.Website); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorDescription) UnmarshalBinary(b []byte) error {
	var res ValidatorDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
