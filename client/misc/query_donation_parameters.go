// Code generated by go-swagger; DO NOT EDIT.

package misc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryDonationParams creates a new QueryDonationParams object
// with the default values initialized.
func NewQueryDonationParams() *QueryDonationParams {
	var ()
	return &QueryDonationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryDonationParamsWithTimeout creates a new QueryDonationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryDonationParamsWithTimeout(timeout time.Duration) *QueryDonationParams {
	var ()
	return &QueryDonationParams{

		timeout: timeout,
	}
}

// NewQueryDonationParamsWithContext creates a new QueryDonationParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryDonationParamsWithContext(ctx context.Context) *QueryDonationParams {
	var ()
	return &QueryDonationParams{

		Context: ctx,
	}
}

// NewQueryDonationParamsWithHTTPClient creates a new QueryDonationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryDonationParamsWithHTTPClient(client *http.Client) *QueryDonationParams {
	var ()
	return &QueryDonationParams{
		HTTPClient: client,
	}
}

/*QueryDonationParams contains all the parameters to send to the API endpoint
for the query donation operation typically these are written to a http.Request
*/
type QueryDonationParams struct {

	/*Count
	  Querier count limited to 1024

	*/
	Count int32
	/*Sid
	  Sequence id

	*/
	Sid int64
	/*Time
	  Unix timestamp

	*/
	Time int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query donation params
func (o *QueryDonationParams) WithTimeout(timeout time.Duration) *QueryDonationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query donation params
func (o *QueryDonationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query donation params
func (o *QueryDonationParams) WithContext(ctx context.Context) *QueryDonationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query donation params
func (o *QueryDonationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query donation params
func (o *QueryDonationParams) WithHTTPClient(client *http.Client) *QueryDonationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query donation params
func (o *QueryDonationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the query donation params
func (o *QueryDonationParams) WithCount(count int32) *QueryDonationParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the query donation params
func (o *QueryDonationParams) SetCount(count int32) {
	o.Count = count
}

// WithSid adds the sid to the query donation params
func (o *QueryDonationParams) WithSid(sid int64) *QueryDonationParams {
	o.SetSid(sid)
	return o
}

// SetSid adds the sid to the query donation params
func (o *QueryDonationParams) SetSid(sid int64) {
	o.Sid = sid
}

// WithTime adds the time to the query donation params
func (o *QueryDonationParams) WithTime(time int64) *QueryDonationParams {
	o.SetTime(time)
	return o
}

// SetTime adds the time to the query donation params
func (o *QueryDonationParams) SetTime(time int64) {
	o.Time = time
}

// WriteToRequest writes these params to a swagger request
func (o *QueryDonationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param count
	qrCount := o.Count
	qCount := swag.FormatInt32(qrCount)
	if qCount != "" {
		if err := r.SetQueryParam("count", qCount); err != nil {
			return err
		}
	}

	// query param sid
	qrSid := o.Sid
	qSid := swag.FormatInt64(qrSid)
	if qSid != "" {
		if err := r.SetQueryParam("sid", qSid); err != nil {
			return err
		}
	}

	// query param time
	qrTime := o.Time
	qTime := swag.FormatInt64(qrTime)
	if qTime != "" {
		if err := r.SetQueryParam("time", qTime); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
