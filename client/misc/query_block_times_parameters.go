// Code generated by go-swagger; DO NOT EDIT.

package misc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryBlockTimesParams creates a new QueryBlockTimesParams object
// with the default values initialized.
func NewQueryBlockTimesParams() *QueryBlockTimesParams {
	var ()
	return &QueryBlockTimesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryBlockTimesParamsWithTimeout creates a new QueryBlockTimesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryBlockTimesParamsWithTimeout(timeout time.Duration) *QueryBlockTimesParams {
	var ()
	return &QueryBlockTimesParams{

		timeout: timeout,
	}
}

// NewQueryBlockTimesParamsWithContext creates a new QueryBlockTimesParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryBlockTimesParamsWithContext(ctx context.Context) *QueryBlockTimesParams {
	var ()
	return &QueryBlockTimesParams{

		Context: ctx,
	}
}

// NewQueryBlockTimesParamsWithHTTPClient creates a new QueryBlockTimesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryBlockTimesParamsWithHTTPClient(client *http.Client) *QueryBlockTimesParams {
	var ()
	return &QueryBlockTimesParams{
		HTTPClient: client,
	}
}

/*QueryBlockTimesParams contains all the parameters to send to the API endpoint
for the query block times operation typically these are written to a http.Request
*/
type QueryBlockTimesParams struct {

	/*Count
	  Querier count limited to 1024

	*/
	Count int32
	/*Height
	  Block height

	*/
	Height int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query block times params
func (o *QueryBlockTimesParams) WithTimeout(timeout time.Duration) *QueryBlockTimesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query block times params
func (o *QueryBlockTimesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query block times params
func (o *QueryBlockTimesParams) WithContext(ctx context.Context) *QueryBlockTimesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query block times params
func (o *QueryBlockTimesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query block times params
func (o *QueryBlockTimesParams) WithHTTPClient(client *http.Client) *QueryBlockTimesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query block times params
func (o *QueryBlockTimesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the query block times params
func (o *QueryBlockTimesParams) WithCount(count int32) *QueryBlockTimesParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the query block times params
func (o *QueryBlockTimesParams) SetCount(count int32) {
	o.Count = count
}

// WithHeight adds the height to the query block times params
func (o *QueryBlockTimesParams) WithHeight(height int64) *QueryBlockTimesParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the query block times params
func (o *QueryBlockTimesParams) SetHeight(height int64) {
	o.Height = height
}

// WriteToRequest writes these params to a swagger request
func (o *QueryBlockTimesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param count
	qrCount := o.Count
	qCount := swag.FormatInt32(qrCount)
	if qCount != "" {
		if err := r.SetQueryParam("count", qCount); err != nil {
			return err
		}
	}

	// query param height
	qrHeight := o.Height
	qHeight := swag.FormatInt64(qrHeight)
	if qHeight != "" {
		if err := r.SetQueryParam("height", qHeight); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
