// Code generated by go-swagger; DO NOT EDIT.

package staking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetStakingPoolReader is a Reader for the GetStakingPool structure.
type GetStakingPoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStakingPoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStakingPoolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetStakingPoolInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetStakingPoolOK creates a GetStakingPoolOK with default headers values
func NewGetStakingPoolOK() *GetStakingPoolOK {
	return &GetStakingPoolOK{}
}

/*GetStakingPoolOK handles this case with default header values.

OK
*/
type GetStakingPoolOK struct {
	Payload *GetStakingPoolOKBody
}

func (o *GetStakingPoolOK) Error() string {
	return fmt.Sprintf("[GET /staking/pool][%d] getStakingPoolOK  %+v", 200, o.Payload)
}

func (o *GetStakingPoolOK) GetPayload() *GetStakingPoolOKBody {
	return o.Payload
}

func (o *GetStakingPoolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetStakingPoolOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStakingPoolInternalServerError creates a GetStakingPoolInternalServerError with default headers values
func NewGetStakingPoolInternalServerError() *GetStakingPoolInternalServerError {
	return &GetStakingPoolInternalServerError{}
}

/*GetStakingPoolInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetStakingPoolInternalServerError struct {
}

func (o *GetStakingPoolInternalServerError) Error() string {
	return fmt.Sprintf("[GET /staking/pool][%d] getStakingPoolInternalServerError ", 500)
}

func (o *GetStakingPoolInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetStakingPoolOKBody get staking pool o k body
swagger:model GetStakingPoolOKBody
*/
type GetStakingPoolOKBody struct {

	// height
	Height string `json:"height,omitempty"`

	// result
	Result *GetStakingPoolOKBodyResult `json:"result,omitempty"`
}

// Validate validates this get staking pool o k body
func (o *GetStakingPoolOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStakingPoolOKBody) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getStakingPoolOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetStakingPoolOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStakingPoolOKBody) UnmarshalBinary(b []byte) error {
	var res GetStakingPoolOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetStakingPoolOKBodyResult get staking pool o k body result
swagger:model GetStakingPoolOKBodyResult
*/
type GetStakingPoolOKBodyResult struct {

	// bonded ratio
	// Required: true
	BondedRatio *string `json:"bonded_ratio"`

	// bonded tokens
	// Required: true
	BondedTokens *string `json:"bonded_tokens"`

	// non bondable tokens
	// Required: true
	NonBondableTokens *string `json:"non_bondable_tokens"`

	// not bonded tokens
	// Required: true
	NotBondedTokens *string `json:"not_bonded_tokens"`

	// total supply
	// Required: true
	TotalSupply *string `json:"total_supply"`
}

// Validate validates this get staking pool o k body result
func (o *GetStakingPoolOKBodyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBondedRatio(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBondedTokens(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNonBondableTokens(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNotBondedTokens(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalSupply(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStakingPoolOKBodyResult) validateBondedRatio(formats strfmt.Registry) error {

	if err := validate.Required("getStakingPoolOK"+"."+"result"+"."+"bonded_ratio", "body", o.BondedRatio); err != nil {
		return err
	}

	return nil
}

func (o *GetStakingPoolOKBodyResult) validateBondedTokens(formats strfmt.Registry) error {

	if err := validate.Required("getStakingPoolOK"+"."+"result"+"."+"bonded_tokens", "body", o.BondedTokens); err != nil {
		return err
	}

	return nil
}

func (o *GetStakingPoolOKBodyResult) validateNonBondableTokens(formats strfmt.Registry) error {

	if err := validate.Required("getStakingPoolOK"+"."+"result"+"."+"non_bondable_tokens", "body", o.NonBondableTokens); err != nil {
		return err
	}

	return nil
}

func (o *GetStakingPoolOKBodyResult) validateNotBondedTokens(formats strfmt.Registry) error {

	if err := validate.Required("getStakingPoolOK"+"."+"result"+"."+"not_bonded_tokens", "body", o.NotBondedTokens); err != nil {
		return err
	}

	return nil
}

func (o *GetStakingPoolOKBodyResult) validateTotalSupply(formats strfmt.Registry) error {

	if err := validate.Required("getStakingPoolOK"+"."+"result"+"."+"total_supply", "body", o.TotalSupply); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetStakingPoolOKBodyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStakingPoolOKBodyResult) UnmarshalBinary(b []byte) error {
	var res GetStakingPoolOKBodyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
