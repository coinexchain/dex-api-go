// Code generated by go-swagger; DO NOT EDIT.

package staking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/coinexchain/dex-api-go/models"
)

// GetValidatorReader is a Reader for the GetValidator structure.
type GetValidatorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetValidatorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetValidatorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetValidatorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetValidatorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetValidatorOK creates a GetValidatorOK with default headers values
func NewGetValidatorOK() *GetValidatorOK {
	return &GetValidatorOK{}
}

/*GetValidatorOK handles this case with default header values.

OK
*/
type GetValidatorOK struct {
	Payload *GetValidatorOKBody
}

func (o *GetValidatorOK) Error() string {
	return fmt.Sprintf("[GET /staking/validators/{validatorAddr}][%d] getValidatorOK  %+v", 200, o.Payload)
}

func (o *GetValidatorOK) GetPayload() *GetValidatorOKBody {
	return o.Payload
}

func (o *GetValidatorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetValidatorOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetValidatorBadRequest creates a GetValidatorBadRequest with default headers values
func NewGetValidatorBadRequest() *GetValidatorBadRequest {
	return &GetValidatorBadRequest{}
}

/*GetValidatorBadRequest handles this case with default header values.

Invalid validator address
*/
type GetValidatorBadRequest struct {
}

func (o *GetValidatorBadRequest) Error() string {
	return fmt.Sprintf("[GET /staking/validators/{validatorAddr}][%d] getValidatorBadRequest ", 400)
}

func (o *GetValidatorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetValidatorInternalServerError creates a GetValidatorInternalServerError with default headers values
func NewGetValidatorInternalServerError() *GetValidatorInternalServerError {
	return &GetValidatorInternalServerError{}
}

/*GetValidatorInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetValidatorInternalServerError struct {
}

func (o *GetValidatorInternalServerError) Error() string {
	return fmt.Sprintf("[GET /staking/validators/{validatorAddr}][%d] getValidatorInternalServerError ", 500)
}

func (o *GetValidatorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetValidatorOKBody get validator o k body
swagger:model GetValidatorOKBody
*/
type GetValidatorOKBody struct {

	// height
	Height string `json:"height,omitempty"`

	// result
	Result *models.Validator `json:"result,omitempty"`
}

// Validate validates this get validator o k body
func (o *GetValidatorOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetValidatorOKBody) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getValidatorOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetValidatorOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetValidatorOKBody) UnmarshalBinary(b []byte) error {
	var res GetValidatorOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
