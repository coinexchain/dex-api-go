// Code generated by go-swagger; DO NOT EDIT.

package staking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new staking API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for staking API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDelegations(params *GetDelegationsParams) (*GetDelegationsOK, error)

	GetDelegationsOfValidator(params *GetDelegationsOfValidatorParams) (*GetDelegationsOfValidatorOK, error)

	GetDelegationsToValidator(params *GetDelegationsToValidatorParams) (*GetDelegationsToValidatorOK, error)

	GetDelegatorTxs(params *GetDelegatorTxsParams) (*GetDelegatorTxsOK, *GetDelegatorTxsNoContent, error)

	GetRedelegations(params *GetRedelegationsParams) (*GetRedelegationsOK, error)

	GetStakingParameters(params *GetStakingParametersParams) (*GetStakingParametersOK, error)

	GetStakingPool(params *GetStakingPoolParams) (*GetStakingPoolOK, error)

	GetUndelegationsBetween(params *GetUndelegationsBetweenParams) (*GetUndelegationsBetweenOK, error)

	GetUndelegationsOfDelegator(params *GetUndelegationsOfDelegatorParams) (*GetUndelegationsOfDelegatorOK, error)

	GetUndelegationsOfValidator(params *GetUndelegationsOfValidatorParams) (*GetUndelegationsOfValidatorOK, error)

	GetValidator(params *GetValidatorParams) (*GetValidatorOK, error)

	GetValidatorOfDelegator(params *GetValidatorOfDelegatorParams) (*GetValidatorOfDelegatorOK, error)

	GetValidators(params *GetValidatorsParams) (*GetValidatorsOK, error)

	GetValidatorsOfDelegator(params *GetValidatorsOfDelegatorParams) (*GetValidatorsOfDelegatorOK, error)

	SubmitDelegation(params *SubmitDelegationParams) (*SubmitDelegationOK, error)

	SubmitRedelegation(params *SubmitRedelegationParams) (*SubmitRedelegationOK, error)

	Undelegate(params *UndelegateParams) (*UndelegateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDelegations gets all delegations from a delegator
*/
func (a *Client) GetDelegations(params *GetDelegationsParams) (*GetDelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDelegationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDelegations",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDelegations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDelegationsOfValidator gets all delegations from a validator
*/
func (a *Client) GetDelegationsOfValidator(params *GetDelegationsOfValidatorParams) (*GetDelegationsOfValidatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDelegationsOfValidatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDelegationsOfValidator",
		Method:             "GET",
		PathPattern:        "/staking/validators/{validatorAddr}/delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDelegationsOfValidatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDelegationsOfValidatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDelegationsOfValidator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDelegationsToValidator queries the current delegation between a delegator and a validator
*/
func (a *Client) GetDelegationsToValidator(params *GetDelegationsToValidatorParams) (*GetDelegationsToValidatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDelegationsToValidatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDelegationsToValidator",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDelegationsToValidatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDelegationsToValidatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDelegationsToValidator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDelegatorTxs gets all staking txs i e msgs from a delegator
*/
func (a *Client) GetDelegatorTxs(params *GetDelegatorTxsParams) (*GetDelegatorTxsOK, *GetDelegatorTxsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDelegatorTxsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDelegatorTxs",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/txs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDelegatorTxsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetDelegatorTxsOK:
		return value, nil, nil
	case *GetDelegatorTxsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for staking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRedelegations gets all redelegations filter by query params
*/
func (a *Client) GetRedelegations(params *GetRedelegationsParams) (*GetRedelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRedelegationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRedelegations",
		Method:             "GET",
		PathPattern:        "/staking/redelegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRedelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRedelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRedelegations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingParameters gets the current staking parameter values
*/
func (a *Client) GetStakingParameters(params *GetStakingParametersParams) (*GetStakingParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStakingParameters",
		Method:             "GET",
		PathPattern:        "/staking/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStakingParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStakingParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingPool gets the current state of the staking pool
*/
func (a *Client) GetStakingPool(params *GetStakingPoolParams) (*GetStakingPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStakingPool",
		Method:             "GET",
		PathPattern:        "/staking/pool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStakingPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStakingPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUndelegationsBetween queries all unbonding delegations between a delegator and a validator
*/
func (a *Client) GetUndelegationsBetween(params *GetUndelegationsBetweenParams) (*GetUndelegationsBetweenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUndelegationsBetweenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUndelegationsBetween",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUndelegationsBetweenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUndelegationsBetweenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUndelegationsBetween: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUndelegationsOfDelegator gets all unbonding delegations from a delegator
*/
func (a *Client) GetUndelegationsOfDelegator(params *GetUndelegationsOfDelegatorParams) (*GetUndelegationsOfDelegatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUndelegationsOfDelegatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUndelegationsOfDelegator",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/unbonding_delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUndelegationsOfDelegatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUndelegationsOfDelegatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUndelegationsOfDelegator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUndelegationsOfValidator gets all unbonding delegations from a validator
*/
func (a *Client) GetUndelegationsOfValidator(params *GetUndelegationsOfValidatorParams) (*GetUndelegationsOfValidatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUndelegationsOfValidatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUndelegationsOfValidator",
		Method:             "GET",
		PathPattern:        "/staking/validators/{validatorAddr}/unbonding_delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUndelegationsOfValidatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUndelegationsOfValidatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUndelegationsOfValidator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetValidator queries the information from a single validator
*/
func (a *Client) GetValidator(params *GetValidatorParams) (*GetValidatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getValidator",
		Method:             "GET",
		PathPattern:        "/staking/validators/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetValidatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetValidatorOfDelegator queries a validator that a delegator is bonded to
*/
func (a *Client) GetValidatorOfDelegator(params *GetValidatorOfDelegatorParams) (*GetValidatorOfDelegatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidatorOfDelegatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getValidatorOfDelegator",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/validators/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetValidatorOfDelegatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidatorOfDelegatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidatorOfDelegator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetValidators gets all validator candidates by default it returns only the bonded validators
*/
func (a *Client) GetValidators(params *GetValidatorsParams) (*GetValidatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidatorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getValidators",
		Method:             "GET",
		PathPattern:        "/staking/validators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetValidatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetValidatorsOfDelegator queries all validators that a delegator is bonded to
*/
func (a *Client) GetValidatorsOfDelegator(params *GetValidatorsOfDelegatorParams) (*GetValidatorsOfDelegatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidatorsOfDelegatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getValidatorsOfDelegator",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/validators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetValidatorsOfDelegatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidatorsOfDelegatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidatorsOfDelegator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubmitDelegation submits delegation
*/
func (a *Client) SubmitDelegation(params *SubmitDelegationParams) (*SubmitDelegationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitDelegationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitDelegation",
		Method:             "POST",
		PathPattern:        "/staking/delegators/{delegatorAddr}/delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitDelegationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitDelegationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitDelegation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubmitRedelegation submits a redelegation
*/
func (a *Client) SubmitRedelegation(params *SubmitRedelegationParams) (*SubmitRedelegationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitRedelegationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitRedelegation",
		Method:             "POST",
		PathPattern:        "/staking/delegators/{delegatorAddr}/redelegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitRedelegationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitRedelegationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitRedelegation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Undelegate submits an unbonding delegation
*/
func (a *Client) Undelegate(params *UndelegateParams) (*UndelegateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUndelegateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "undelegate",
		Method:             "POST",
		PathPattern:        "/staking/delegators/{delegatorAddr}/unbonding_delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UndelegateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UndelegateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for undelegate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
