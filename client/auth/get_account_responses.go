// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/coinexchain/dex-api-go/models"
)

// GetAccountReader is a Reader for the GetAccount structure.
type GetAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetAccountNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAccountOK creates a GetAccountOK with default headers values
func NewGetAccountOK() *GetAccountOK {
	return &GetAccountOK{}
}

/*GetAccountOK handles this case with default header values.

Account information on the blockchain
*/
type GetAccountOK struct {
	Payload *GetAccountOKBody
}

func (o *GetAccountOK) Error() string {
	return fmt.Sprintf("[GET /auth/accounts/{address}][%d] getAccountOK  %+v", 200, o.Payload)
}

func (o *GetAccountOK) GetPayload() *GetAccountOKBody {
	return o.Payload
}

func (o *GetAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAccountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountNoContent creates a GetAccountNoContent with default headers values
func NewGetAccountNoContent() *GetAccountNoContent {
	return &GetAccountNoContent{}
}

/*GetAccountNoContent handles this case with default header values.

No content about this account address
*/
type GetAccountNoContent struct {
}

func (o *GetAccountNoContent) Error() string {
	return fmt.Sprintf("[GET /auth/accounts/{address}][%d] getAccountNoContent ", 204)
}

func (o *GetAccountNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccountInternalServerError creates a GetAccountInternalServerError with default headers values
func NewGetAccountInternalServerError() *GetAccountInternalServerError {
	return &GetAccountInternalServerError{}
}

/*GetAccountInternalServerError handles this case with default header values.

Server internel error
*/
type GetAccountInternalServerError struct {
}

func (o *GetAccountInternalServerError) Error() string {
	return fmt.Sprintf("[GET /auth/accounts/{address}][%d] getAccountInternalServerError ", 500)
}

func (o *GetAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetAccountOKBody get account o k body
swagger:model GetAccountOKBody
*/
type GetAccountOKBody struct {

	// height
	Height string `json:"height,omitempty"`

	// result
	Result *GetAccountOKBodyResult `json:"result,omitempty"`
}

// Validate validates this get account o k body
func (o *GetAccountOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountOKBody) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAccountOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountOKBody) UnmarshalBinary(b []byte) error {
	var res GetAccountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAccountOKBodyResult get account o k body result
swagger:model GetAccountOKBodyResult
*/
type GetAccountOKBodyResult struct {

	// account number
	// Required: true
	AccountNumber *string `json:"account_number"`

	// address
	// Required: true
	Address *string `json:"address"`

	// coins
	// Required: true
	Coins []*models.Coin `json:"coins"`

	// frozen coins
	// Required: true
	FrozenCoins []*models.Coin `json:"frozen_coins"`

	// locked coins
	// Required: true
	LockedCoins []*models.LockedCoin `json:"locked_coins"`

	// memo required
	// Required: true
	MemoRequired *bool `json:"memo_required"`

	// public key
	// Required: true
	PublicKey *models.PublicKey `json:"public_key"`

	// referee
	// Required: true
	Referee *string `json:"referee"`

	// referee change time
	// Required: true
	RefereeChangeTime *string `json:"referee_change_time"`

	// sequence
	// Required: true
	Sequence *string `json:"sequence"`
}

// Validate validates this get account o k body result
func (o *GetAccountOKBodyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCoins(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFrozenCoins(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLockedCoins(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMemoRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReferee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRefereeChangeTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSequence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountOKBodyResult) validateAccountNumber(formats strfmt.Registry) error {

	if err := validate.Required("getAccountOK"+"."+"result"+"."+"account_number", "body", o.AccountNumber); err != nil {
		return err
	}

	return nil
}

func (o *GetAccountOKBodyResult) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("getAccountOK"+"."+"result"+"."+"address", "body", o.Address); err != nil {
		return err
	}

	return nil
}

func (o *GetAccountOKBodyResult) validateCoins(formats strfmt.Registry) error {

	if err := validate.Required("getAccountOK"+"."+"result"+"."+"coins", "body", o.Coins); err != nil {
		return err
	}

	for i := 0; i < len(o.Coins); i++ {
		if swag.IsZero(o.Coins[i]) { // not required
			continue
		}

		if o.Coins[i] != nil {
			if err := o.Coins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAccountOK" + "." + "result" + "." + "coins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetAccountOKBodyResult) validateFrozenCoins(formats strfmt.Registry) error {

	if err := validate.Required("getAccountOK"+"."+"result"+"."+"frozen_coins", "body", o.FrozenCoins); err != nil {
		return err
	}

	for i := 0; i < len(o.FrozenCoins); i++ {
		if swag.IsZero(o.FrozenCoins[i]) { // not required
			continue
		}

		if o.FrozenCoins[i] != nil {
			if err := o.FrozenCoins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAccountOK" + "." + "result" + "." + "frozen_coins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetAccountOKBodyResult) validateLockedCoins(formats strfmt.Registry) error {

	if err := validate.Required("getAccountOK"+"."+"result"+"."+"locked_coins", "body", o.LockedCoins); err != nil {
		return err
	}

	for i := 0; i < len(o.LockedCoins); i++ {
		if swag.IsZero(o.LockedCoins[i]) { // not required
			continue
		}

		if o.LockedCoins[i] != nil {
			if err := o.LockedCoins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAccountOK" + "." + "result" + "." + "locked_coins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetAccountOKBodyResult) validateMemoRequired(formats strfmt.Registry) error {

	if err := validate.Required("getAccountOK"+"."+"result"+"."+"memo_required", "body", o.MemoRequired); err != nil {
		return err
	}

	return nil
}

func (o *GetAccountOKBodyResult) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("getAccountOK"+"."+"result"+"."+"public_key", "body", o.PublicKey); err != nil {
		return err
	}

	if o.PublicKey != nil {
		if err := o.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAccountOK" + "." + "result" + "." + "public_key")
			}
			return err
		}
	}

	return nil
}

func (o *GetAccountOKBodyResult) validateReferee(formats strfmt.Registry) error {

	if err := validate.Required("getAccountOK"+"."+"result"+"."+"referee", "body", o.Referee); err != nil {
		return err
	}

	return nil
}

func (o *GetAccountOKBodyResult) validateRefereeChangeTime(formats strfmt.Registry) error {

	if err := validate.Required("getAccountOK"+"."+"result"+"."+"referee_change_time", "body", o.RefereeChangeTime); err != nil {
		return err
	}

	return nil
}

func (o *GetAccountOKBodyResult) validateSequence(formats strfmt.Registry) error {

	if err := validate.Required("getAccountOK"+"."+"result"+"."+"sequence", "body", o.Sequence); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountOKBodyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountOKBodyResult) UnmarshalBinary(b []byte) error {
	var res GetAccountOKBodyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
