// Code generated by go-swagger; DO NOT EDIT.

package distribution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new distribution API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for distribution API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DonateToCommunityPool(params *DonateToCommunityPoolParams) (*DonateToCommunityPoolOK, error)

	GetAllRewards(params *GetAllRewardsParams) (*GetAllRewardsOK, error)

	GetCommunityPool(params *GetCommunityPoolParams) (*GetCommunityPoolOK, error)

	GetDistributionInfo(params *GetDistributionInfoParams) (*GetDistributionInfoOK, error)

	GetDistributionParams(params *GetDistributionParamsParams) (*GetDistributionParamsOK, error)

	GetOutstandingRewards(params *GetOutstandingRewardsParams) (*GetOutstandingRewardsOK, error)

	GetRewardByValidator(params *GetRewardByValidatorParams) (*GetRewardByValidatorOK, error)

	GetValidatorRewards(params *GetValidatorRewardsParams) (*GetValidatorRewardsOK, error)

	GetWithdrawAddress(params *GetWithdrawAddressParams) (*GetWithdrawAddressOK, error)

	SetWithdrawAddress(params *SetWithdrawAddressParams) (*SetWithdrawAddressOK, error)

	WithdrawAllRewards(params *WithdrawAllRewardsParams) (*WithdrawAllRewardsOK, error)

	WithdrawAllValidatorRewards(params *WithdrawAllValidatorRewardsParams) (*WithdrawAllValidatorRewardsOK, error)

	WithdrawRewardsByValidator(params *WithdrawRewardsByValidatorParams) (*WithdrawRewardsByValidatorOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DonateToCommunityPool donates to the community pool

  Donate some amount of cet to the community pool
*/
func (a *Client) DonateToCommunityPool(params *DonateToCommunityPoolParams) (*DonateToCommunityPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDonateToCommunityPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "donateToCommunityPool",
		Method:             "POST",
		PathPattern:        "/distribution/{accAddress}/donates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DonateToCommunityPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DonateToCommunityPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for donateToCommunityPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllRewards gets the total rewards balance from all delegations

  Get the sum of all the rewards earned by delegations by a single delegator
*/
func (a *Client) GetAllRewards(params *GetAllRewardsParams) (*GetAllRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllRewards",
		Method:             "GET",
		PathPattern:        "/distribution/delegators/{delegatorAddr}/rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCommunityPool communities pool parameters
*/
func (a *Client) GetCommunityPool(params *GetCommunityPoolParams) (*GetCommunityPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommunityPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCommunityPool",
		Method:             "GET",
		PathPattern:        "/distribution/community_pool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCommunityPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCommunityPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCommunityPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDistributionInfo validators distribution information

  Query the distribution information of a single validator
*/
func (a *Client) GetDistributionInfo(params *GetDistributionInfoParams) (*GetDistributionInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistributionInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDistributionInfo",
		Method:             "GET",
		PathPattern:        "/distribution/validators/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDistributionInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistributionInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDistributionInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDistributionParams fees distribution parameters
*/
func (a *Client) GetDistributionParams(params *GetDistributionParamsParams) (*GetDistributionParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistributionParamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDistributionParams",
		Method:             "GET",
		PathPattern:        "/distribution/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDistributionParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistributionParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDistributionParams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOutstandingRewards fees distribution outstanding rewards of a single validator
*/
func (a *Client) GetOutstandingRewards(params *GetOutstandingRewardsParams) (*GetOutstandingRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutstandingRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutstandingRewards",
		Method:             "GET",
		PathPattern:        "/distribution/validators/{validatorAddr}/outstanding_rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOutstandingRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOutstandingRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOutstandingRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRewardByValidator queries a delegation reward

  Query a single delegation reward by a delegator
*/
func (a *Client) GetRewardByValidator(params *GetRewardByValidatorParams) (*GetRewardByValidatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRewardByValidatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRewardByValidator",
		Method:             "GET",
		PathPattern:        "/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRewardByValidatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRewardByValidatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRewardByValidator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetValidatorRewards commissions and self delegation rewards of a single validator

  Query the commission and self-delegation rewards of validator.
*/
func (a *Client) GetValidatorRewards(params *GetValidatorRewardsParams) (*GetValidatorRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidatorRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getValidatorRewards",
		Method:             "GET",
		PathPattern:        "/distribution/validators/{validatorAddr}/rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetValidatorRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidatorRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidatorRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWithdrawAddress gets the rewards withdrawal address

  Get the delegations' rewards withdrawal address. This is the address in which the user will receive the reward funds
*/
func (a *Client) GetWithdrawAddress(params *GetWithdrawAddressParams) (*GetWithdrawAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWithdrawAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWithdrawAddress",
		Method:             "GET",
		PathPattern:        "/distribution/delegators/{delegatorAddr}/withdraw_address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWithdrawAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWithdrawAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWithdrawAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetWithdrawAddress replaces the rewards withdrawal address

  Replace the delegations' rewards withdrawal address for a new one.
*/
func (a *Client) SetWithdrawAddress(params *SetWithdrawAddressParams) (*SetWithdrawAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetWithdrawAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setWithdrawAddress",
		Method:             "POST",
		PathPattern:        "/distribution/delegators/{delegatorAddr}/withdraw_address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetWithdrawAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetWithdrawAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setWithdrawAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WithdrawAllRewards withdraws all the delegator s delegation rewards

  Withdraw all the delegator's delegation rewards
*/
func (a *Client) WithdrawAllRewards(params *WithdrawAllRewardsParams) (*WithdrawAllRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWithdrawAllRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "withdrawAllRewards",
		Method:             "POST",
		PathPattern:        "/distribution/delegators/{delegatorAddr}/rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WithdrawAllRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WithdrawAllRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for withdrawAllRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WithdrawAllValidatorRewards withdraws the validator s rewards

  Withdraw the validator's self-delegation and commissions rewards
*/
func (a *Client) WithdrawAllValidatorRewards(params *WithdrawAllValidatorRewardsParams) (*WithdrawAllValidatorRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWithdrawAllValidatorRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "withdrawAllValidatorRewards",
		Method:             "POST",
		PathPattern:        "/distribution/validators/{validatorAddr}/rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WithdrawAllValidatorRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WithdrawAllValidatorRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for withdrawAllValidatorRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WithdrawRewardsByValidator withdraws a delegation reward

  Withdraw a delegator's delegation reward from a single validator
*/
func (a *Client) WithdrawRewardsByValidator(params *WithdrawRewardsByValidatorParams) (*WithdrawRewardsByValidatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWithdrawRewardsByValidatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "withdrawRewardsByValidator",
		Method:             "POST",
		PathPattern:        "/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WithdrawRewardsByValidatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WithdrawRewardsByValidatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for withdrawRewardsByValidator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
