// Code generated by go-swagger; DO NOT EDIT.

package distribution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewWithdrawAllValidatorRewardsParams creates a new WithdrawAllValidatorRewardsParams object
// with the default values initialized.
func NewWithdrawAllValidatorRewardsParams() *WithdrawAllValidatorRewardsParams {
	var ()
	return &WithdrawAllValidatorRewardsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWithdrawAllValidatorRewardsParamsWithTimeout creates a new WithdrawAllValidatorRewardsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWithdrawAllValidatorRewardsParamsWithTimeout(timeout time.Duration) *WithdrawAllValidatorRewardsParams {
	var ()
	return &WithdrawAllValidatorRewardsParams{

		timeout: timeout,
	}
}

// NewWithdrawAllValidatorRewardsParamsWithContext creates a new WithdrawAllValidatorRewardsParams object
// with the default values initialized, and the ability to set a context for a request
func NewWithdrawAllValidatorRewardsParamsWithContext(ctx context.Context) *WithdrawAllValidatorRewardsParams {
	var ()
	return &WithdrawAllValidatorRewardsParams{

		Context: ctx,
	}
}

// NewWithdrawAllValidatorRewardsParamsWithHTTPClient creates a new WithdrawAllValidatorRewardsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWithdrawAllValidatorRewardsParamsWithHTTPClient(client *http.Client) *WithdrawAllValidatorRewardsParams {
	var ()
	return &WithdrawAllValidatorRewardsParams{
		HTTPClient: client,
	}
}

/*WithdrawAllValidatorRewardsParams contains all the parameters to send to the API endpoint
for the withdraw all validator rewards operation typically these are written to a http.Request
*/
type WithdrawAllValidatorRewardsParams struct {

	/*WithdrawRequestBody*/
	WithdrawRequestBody WithdrawAllValidatorRewardsBody
	/*ValidatorAddr
	  Bech32 OperatorAddress of validator

	*/
	ValidatorAddr string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the withdraw all validator rewards params
func (o *WithdrawAllValidatorRewardsParams) WithTimeout(timeout time.Duration) *WithdrawAllValidatorRewardsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the withdraw all validator rewards params
func (o *WithdrawAllValidatorRewardsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the withdraw all validator rewards params
func (o *WithdrawAllValidatorRewardsParams) WithContext(ctx context.Context) *WithdrawAllValidatorRewardsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the withdraw all validator rewards params
func (o *WithdrawAllValidatorRewardsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the withdraw all validator rewards params
func (o *WithdrawAllValidatorRewardsParams) WithHTTPClient(client *http.Client) *WithdrawAllValidatorRewardsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the withdraw all validator rewards params
func (o *WithdrawAllValidatorRewardsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithWithdrawRequestBody adds the withdrawRequestBody to the withdraw all validator rewards params
func (o *WithdrawAllValidatorRewardsParams) WithWithdrawRequestBody(withdrawRequestBody WithdrawAllValidatorRewardsBody) *WithdrawAllValidatorRewardsParams {
	o.SetWithdrawRequestBody(withdrawRequestBody)
	return o
}

// SetWithdrawRequestBody adds the withdrawRequestBody to the withdraw all validator rewards params
func (o *WithdrawAllValidatorRewardsParams) SetWithdrawRequestBody(withdrawRequestBody WithdrawAllValidatorRewardsBody) {
	o.WithdrawRequestBody = withdrawRequestBody
}

// WithValidatorAddr adds the validatorAddr to the withdraw all validator rewards params
func (o *WithdrawAllValidatorRewardsParams) WithValidatorAddr(validatorAddr string) *WithdrawAllValidatorRewardsParams {
	o.SetValidatorAddr(validatorAddr)
	return o
}

// SetValidatorAddr adds the validatorAddr to the withdraw all validator rewards params
func (o *WithdrawAllValidatorRewardsParams) SetValidatorAddr(validatorAddr string) {
	o.ValidatorAddr = validatorAddr
}

// WriteToRequest writes these params to a swagger request
func (o *WithdrawAllValidatorRewardsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.WithdrawRequestBody); err != nil {
		return err
	}

	// path param validatorAddr
	if err := r.SetPathParam("validatorAddr", o.ValidatorAddr); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
