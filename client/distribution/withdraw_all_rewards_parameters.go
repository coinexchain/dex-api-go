// Code generated by go-swagger; DO NOT EDIT.

package distribution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewWithdrawAllRewardsParams creates a new WithdrawAllRewardsParams object
// with the default values initialized.
func NewWithdrawAllRewardsParams() *WithdrawAllRewardsParams {
	var ()
	return &WithdrawAllRewardsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWithdrawAllRewardsParamsWithTimeout creates a new WithdrawAllRewardsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWithdrawAllRewardsParamsWithTimeout(timeout time.Duration) *WithdrawAllRewardsParams {
	var ()
	return &WithdrawAllRewardsParams{

		timeout: timeout,
	}
}

// NewWithdrawAllRewardsParamsWithContext creates a new WithdrawAllRewardsParams object
// with the default values initialized, and the ability to set a context for a request
func NewWithdrawAllRewardsParamsWithContext(ctx context.Context) *WithdrawAllRewardsParams {
	var ()
	return &WithdrawAllRewardsParams{

		Context: ctx,
	}
}

// NewWithdrawAllRewardsParamsWithHTTPClient creates a new WithdrawAllRewardsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWithdrawAllRewardsParamsWithHTTPClient(client *http.Client) *WithdrawAllRewardsParams {
	var ()
	return &WithdrawAllRewardsParams{
		HTTPClient: client,
	}
}

/*WithdrawAllRewardsParams contains all the parameters to send to the API endpoint
for the withdraw all rewards operation typically these are written to a http.Request
*/
type WithdrawAllRewardsParams struct {

	/*WithdrawRequestBody*/
	WithdrawRequestBody WithdrawAllRewardsBody
	/*DelegatorAddr
	  Bech32 AccAddress of Delegator

	*/
	DelegatorAddr string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the withdraw all rewards params
func (o *WithdrawAllRewardsParams) WithTimeout(timeout time.Duration) *WithdrawAllRewardsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the withdraw all rewards params
func (o *WithdrawAllRewardsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the withdraw all rewards params
func (o *WithdrawAllRewardsParams) WithContext(ctx context.Context) *WithdrawAllRewardsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the withdraw all rewards params
func (o *WithdrawAllRewardsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the withdraw all rewards params
func (o *WithdrawAllRewardsParams) WithHTTPClient(client *http.Client) *WithdrawAllRewardsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the withdraw all rewards params
func (o *WithdrawAllRewardsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithWithdrawRequestBody adds the withdrawRequestBody to the withdraw all rewards params
func (o *WithdrawAllRewardsParams) WithWithdrawRequestBody(withdrawRequestBody WithdrawAllRewardsBody) *WithdrawAllRewardsParams {
	o.SetWithdrawRequestBody(withdrawRequestBody)
	return o
}

// SetWithdrawRequestBody adds the withdrawRequestBody to the withdraw all rewards params
func (o *WithdrawAllRewardsParams) SetWithdrawRequestBody(withdrawRequestBody WithdrawAllRewardsBody) {
	o.WithdrawRequestBody = withdrawRequestBody
}

// WithDelegatorAddr adds the delegatorAddr to the withdraw all rewards params
func (o *WithdrawAllRewardsParams) WithDelegatorAddr(delegatorAddr string) *WithdrawAllRewardsParams {
	o.SetDelegatorAddr(delegatorAddr)
	return o
}

// SetDelegatorAddr adds the delegatorAddr to the withdraw all rewards params
func (o *WithdrawAllRewardsParams) SetDelegatorAddr(delegatorAddr string) {
	o.DelegatorAddr = delegatorAddr
}

// WriteToRequest writes these params to a swagger request
func (o *WithdrawAllRewardsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.WithdrawRequestBody); err != nil {
		return err
	}

	// path param delegatorAddr
	if err := r.SetPathParam("delegatorAddr", o.DelegatorAddr); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
