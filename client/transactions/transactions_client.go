// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transactions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transactions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BroadcastTx(params *BroadcastTxParams) (*BroadcastTxOK, error)

	EncodeTx(params *EncodeTxParams) (*EncodeTxOK, error)

	GetTxByHash(params *GetTxByHashParams) (*GetTxByHashOK, error)

	SearchTx(params *SearchTxParams) (*SearchTxOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BroadcastTx broadcasts a signed tx

  Broadcast a signed tx to a full node
*/
func (a *Client) BroadcastTx(params *BroadcastTxParams) (*BroadcastTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBroadcastTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "broadcastTx",
		Method:             "POST",
		PathPattern:        "/txs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BroadcastTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BroadcastTxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for broadcastTx: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EncodeTx encodes a transaction to the amino wire format

  Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
*/
func (a *Client) EncodeTx(params *EncodeTxParams) (*EncodeTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEncodeTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "encodeTx",
		Method:             "POST",
		PathPattern:        "/txs/encode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EncodeTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EncodeTxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for encodeTx: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTxByHash gets a tx by hash
*/
func (a *Client) GetTxByHash(params *GetTxByHashParams) (*GetTxByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTxByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTxByHash",
		Method:             "GET",
		PathPattern:        "/txs/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTxByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTxByHashOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTxByHash: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchTx searches transactions

  Search transactions by events.
*/
func (a *Client) SearchTx(params *SearchTxParams) (*SearchTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchTx",
		Method:             "GET",
		PathPattern:        "/txs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchTx: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
