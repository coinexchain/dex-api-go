// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewBroadcastTxParams creates a new BroadcastTxParams object
// with the default values initialized.
func NewBroadcastTxParams() *BroadcastTxParams {
	var ()
	return &BroadcastTxParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewBroadcastTxParamsWithTimeout creates a new BroadcastTxParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBroadcastTxParamsWithTimeout(timeout time.Duration) *BroadcastTxParams {
	var ()
	return &BroadcastTxParams{

		timeout: timeout,
	}
}

// NewBroadcastTxParamsWithContext creates a new BroadcastTxParams object
// with the default values initialized, and the ability to set a context for a request
func NewBroadcastTxParamsWithContext(ctx context.Context) *BroadcastTxParams {
	var ()
	return &BroadcastTxParams{

		Context: ctx,
	}
}

// NewBroadcastTxParamsWithHTTPClient creates a new BroadcastTxParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewBroadcastTxParamsWithHTTPClient(client *http.Client) *BroadcastTxParams {
	var ()
	return &BroadcastTxParams{
		HTTPClient: client,
	}
}

/*BroadcastTxParams contains all the parameters to send to the API endpoint
for the broadcast tx operation typically these are written to a http.Request
*/
type BroadcastTxParams struct {

	/*TxBroadcast
	  The tx must be a signed StdTx. The supported broadcast modes include `"block"`(return after tx commit), `"sync"`(return afer CheckTx) and `"async"`(return right away).

	*/
	TxBroadcast BroadcastTxBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the broadcast tx params
func (o *BroadcastTxParams) WithTimeout(timeout time.Duration) *BroadcastTxParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the broadcast tx params
func (o *BroadcastTxParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the broadcast tx params
func (o *BroadcastTxParams) WithContext(ctx context.Context) *BroadcastTxParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the broadcast tx params
func (o *BroadcastTxParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the broadcast tx params
func (o *BroadcastTxParams) WithHTTPClient(client *http.Client) *BroadcastTxParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the broadcast tx params
func (o *BroadcastTxParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTxBroadcast adds the txBroadcast to the broadcast tx params
func (o *BroadcastTxParams) WithTxBroadcast(txBroadcast BroadcastTxBody) *BroadcastTxParams {
	o.SetTxBroadcast(txBroadcast)
	return o
}

// SetTxBroadcast adds the txBroadcast to the broadcast tx params
func (o *BroadcastTxParams) SetTxBroadcast(txBroadcast BroadcastTxBody) {
	o.TxBroadcast = txBroadcast
}

// WriteToRequest writes these params to a swagger request
func (o *BroadcastTxParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.TxBroadcast); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
