// Code generated by go-swagger; DO NOT EDIT.

package asset

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/coinexchain/dex-api-go/models"
)

// NewIssueTokenParams creates a new IssueTokenParams object
// with the default values initialized.
func NewIssueTokenParams() *IssueTokenParams {
	var ()
	return &IssueTokenParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIssueTokenParamsWithTimeout creates a new IssueTokenParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIssueTokenParamsWithTimeout(timeout time.Duration) *IssueTokenParams {
	var ()
	return &IssueTokenParams{

		timeout: timeout,
	}
}

// NewIssueTokenParamsWithContext creates a new IssueTokenParams object
// with the default values initialized, and the ability to set a context for a request
func NewIssueTokenParamsWithContext(ctx context.Context) *IssueTokenParams {
	var ()
	return &IssueTokenParams{

		Context: ctx,
	}
}

// NewIssueTokenParamsWithHTTPClient creates a new IssueTokenParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIssueTokenParamsWithHTTPClient(client *http.Client) *IssueTokenParams {
	var ()
	return &IssueTokenParams{
		HTTPClient: client,
	}
}

/*IssueTokenParams contains all the parameters to send to the API endpoint
for the issue token operation typically these are written to a http.Request
*/
type IssueTokenParams struct {

	/*TokenInfo
	  the detail info about the Token to issue

	*/
	TokenInfo *models.IssueToken

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the issue token params
func (o *IssueTokenParams) WithTimeout(timeout time.Duration) *IssueTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the issue token params
func (o *IssueTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the issue token params
func (o *IssueTokenParams) WithContext(ctx context.Context) *IssueTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the issue token params
func (o *IssueTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the issue token params
func (o *IssueTokenParams) WithHTTPClient(client *http.Client) *IssueTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the issue token params
func (o *IssueTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTokenInfo adds the tokenInfo to the issue token params
func (o *IssueTokenParams) WithTokenInfo(tokenInfo *models.IssueToken) *IssueTokenParams {
	o.SetTokenInfo(tokenInfo)
	return o
}

// SetTokenInfo adds the tokenInfo to the issue token params
func (o *IssueTokenParams) SetTokenInfo(tokenInfo *models.IssueToken) {
	o.TokenInfo = tokenInfo
}

// WriteToRequest writes these params to a swagger request
func (o *IssueTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.TokenInfo != nil {
		if err := r.SetBodyParam(o.TokenInfo); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
