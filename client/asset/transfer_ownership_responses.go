// Code generated by go-swagger; DO NOT EDIT.

package asset

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/coinexchain/dex-api-go/models"
)

// TransferOwnershipReader is a Reader for the TransferOwnership structure.
type TransferOwnershipReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TransferOwnershipReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTransferOwnershipOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTransferOwnershipBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTransferOwnershipInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTransferOwnershipOK creates a TransferOwnershipOK with default headers values
func NewTransferOwnershipOK() *TransferOwnershipOK {
	return &TransferOwnershipOK{}
}

/*TransferOwnershipOK handles this case with default header values.

Token transfer ownership result
*/
type TransferOwnershipOK struct {
	Payload *models.StdTx
}

func (o *TransferOwnershipOK) Error() string {
	return fmt.Sprintf("[POST /asset/tokens/{symbol}/ownerships][%d] transferOwnershipOK  %+v", 200, o.Payload)
}

func (o *TransferOwnershipOK) GetPayload() *models.StdTx {
	return o.Payload
}

func (o *TransferOwnershipOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StdTx)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransferOwnershipBadRequest creates a TransferOwnershipBadRequest with default headers values
func NewTransferOwnershipBadRequest() *TransferOwnershipBadRequest {
	return &TransferOwnershipBadRequest{}
}

/*TransferOwnershipBadRequest handles this case with default header values.

Invalid Request
*/
type TransferOwnershipBadRequest struct {
}

func (o *TransferOwnershipBadRequest) Error() string {
	return fmt.Sprintf("[POST /asset/tokens/{symbol}/ownerships][%d] transferOwnershipBadRequest ", 400)
}

func (o *TransferOwnershipBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTransferOwnershipInternalServerError creates a TransferOwnershipInternalServerError with default headers values
func NewTransferOwnershipInternalServerError() *TransferOwnershipInternalServerError {
	return &TransferOwnershipInternalServerError{}
}

/*TransferOwnershipInternalServerError handles this case with default header values.

Internal Server Error
*/
type TransferOwnershipInternalServerError struct {
}

func (o *TransferOwnershipInternalServerError) Error() string {
	return fmt.Sprintf("[POST /asset/tokens/{symbol}/ownerships][%d] transferOwnershipInternalServerError ", 500)
}

func (o *TransferOwnershipInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*TransferOwnershipBody transfer ownership body
swagger:model TransferOwnershipBody
*/
type TransferOwnershipBody struct {

	// base req
	BaseReq *models.BaseReq `json:"base_req,omitempty"`

	// new owner
	NewOwner models.Address `json:"new_owner,omitempty"`
}

// Validate validates this transfer ownership body
func (o *TransferOwnershipBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNewOwner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TransferOwnershipBody) validateBaseReq(formats strfmt.Registry) error {

	if swag.IsZero(o.BaseReq) { // not required
		return nil
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newOwner" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

func (o *TransferOwnershipBody) validateNewOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.NewOwner) { // not required
		return nil
	}

	if err := o.NewOwner.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("newOwner" + "." + "new_owner")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TransferOwnershipBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TransferOwnershipBody) UnmarshalBinary(b []byte) error {
	var res TransferOwnershipBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
