// Code generated by go-swagger; DO NOT EDIT.

package asset

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/coinexchain/dex-api-go/models"
)

// BurnTokenReader is a Reader for the BurnToken structure.
type BurnTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BurnTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBurnTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBurnTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBurnTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBurnTokenOK creates a BurnTokenOK with default headers values
func NewBurnTokenOK() *BurnTokenOK {
	return &BurnTokenOK{}
}

/*BurnTokenOK handles this case with default header values.

Burn token result
*/
type BurnTokenOK struct {
	Payload *models.StdTx
}

func (o *BurnTokenOK) Error() string {
	return fmt.Sprintf("[POST /asset/tokens/{symbol}/burns][%d] burnTokenOK  %+v", 200, o.Payload)
}

func (o *BurnTokenOK) GetPayload() *models.StdTx {
	return o.Payload
}

func (o *BurnTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StdTx)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBurnTokenBadRequest creates a BurnTokenBadRequest with default headers values
func NewBurnTokenBadRequest() *BurnTokenBadRequest {
	return &BurnTokenBadRequest{}
}

/*BurnTokenBadRequest handles this case with default header values.

Invalid Request
*/
type BurnTokenBadRequest struct {
}

func (o *BurnTokenBadRequest) Error() string {
	return fmt.Sprintf("[POST /asset/tokens/{symbol}/burns][%d] burnTokenBadRequest ", 400)
}

func (o *BurnTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBurnTokenInternalServerError creates a BurnTokenInternalServerError with default headers values
func NewBurnTokenInternalServerError() *BurnTokenInternalServerError {
	return &BurnTokenInternalServerError{}
}

/*BurnTokenInternalServerError handles this case with default header values.

Internal Server Error
*/
type BurnTokenInternalServerError struct {
}

func (o *BurnTokenInternalServerError) Error() string {
	return fmt.Sprintf("[POST /asset/tokens/{symbol}/burns][%d] burnTokenInternalServerError ", 500)
}

func (o *BurnTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*BurnTokenBody burn token body
swagger:model BurnTokenBody
*/
type BurnTokenBody struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// base req
	BaseReq *models.BaseReq `json:"base_req,omitempty"`
}

// Validate validates this burn token body
func (o *BurnTokenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BurnTokenBody) validateBaseReq(formats strfmt.Registry) error {

	if swag.IsZero(o.BaseReq) { // not required
		return nil
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *BurnTokenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BurnTokenBody) UnmarshalBinary(b []byte) error {
	var res BurnTokenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
