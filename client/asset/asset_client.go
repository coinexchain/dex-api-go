// Code generated by go-swagger; DO NOT EDIT.

package asset

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new asset API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for asset API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddWhitelist(params *AddWhitelistParams) (*AddWhitelistOK, error)

	BurnToken(params *BurnTokenParams) (*BurnTokenOK, error)

	ForbidAddr(params *ForbidAddrParams) (*ForbidAddrOK, error)

	ForbidToken(params *ForbidTokenParams) (*ForbidTokenOK, error)

	GetAssetParams(params *GetAssetParamsParams) (*GetAssetParamsOK, error)

	GetForbiddenAddresses(params *GetForbiddenAddressesParams) (*GetForbiddenAddressesOK, error)

	GetReservedSymbols(params *GetReservedSymbolsParams) (*GetReservedSymbolsOK, error)

	GetToken(params *GetTokenParams) (*GetTokenOK, error)

	GetTokenList(params *GetTokenListParams) (*GetTokenListOK, error)

	GetWhitelist(params *GetWhitelistParams) (*GetWhitelistOK, error)

	IssueToken(params *IssueTokenParams) (*IssueTokenOK, error)

	MintToken(params *MintTokenParams) (*MintTokenOK, error)

	ModifyTokenInfo(params *ModifyTokenInfoParams) (*ModifyTokenInfoOK, error)

	RemoveWhitelist(params *RemoveWhitelistParams) (*RemoveWhitelistOK, error)

	TransferOwnership(params *TransferOwnershipParams) (*TransferOwnershipOK, error)

	UnForbidAddr(params *UnForbidAddrParams) (*UnForbidAddrOK, error)

	UnFrobidToken(params *UnFrobidTokenParams) (*UnFrobidTokenOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddWhitelist adds forbid whitelist

  Add forbiddable token whitelist addr
*/
func (a *Client) AddWhitelist(params *AddWhitelistParams) (*AddWhitelistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddWhitelistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addWhitelist",
		Method:             "POST",
		PathPattern:        "/asset/tokens/{symbol}/forbidden/whitelist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddWhitelistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addWhitelist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BurnToken burns token

  Burn burnable token
*/
func (a *Client) BurnToken(params *BurnTokenParams) (*BurnTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBurnTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "burnToken",
		Method:             "POST",
		PathPattern:        "/asset/tokens/{symbol}/burns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BurnTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BurnTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for burnToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForbidAddr forbids address

  Add forbidden addresses
*/
func (a *Client) ForbidAddr(params *ForbidAddrParams) (*ForbidAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForbidAddrParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "forbidAddr",
		Method:             "POST",
		PathPattern:        "/asset/tokens/{symbol}/forbidden/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForbidAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForbidAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forbidAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForbidToken forbids token

  Forbid forbiddable token
*/
func (a *Client) ForbidToken(params *ForbidTokenParams) (*ForbidTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForbidTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "forbidToken",
		Method:             "POST",
		PathPattern:        "/asset/tokens/{symbol}/forbids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForbidTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForbidTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forbidToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAssetParams gets the current asset parameters
*/
func (a *Client) GetAssetParams(params *GetAssetParamsParams) (*GetAssetParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetParamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssetParams",
		Method:             "GET",
		PathPattern:        "/asset/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAssetParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAssetParams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetForbiddenAddresses queries forbidden addresses

  Get forbidden addresses with provided `symbol`
*/
func (a *Client) GetForbiddenAddresses(params *GetForbiddenAddressesParams) (*GetForbiddenAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetForbiddenAddressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getForbiddenAddresses",
		Method:             "GET",
		PathPattern:        "/asset/tokens/{symbol}/forbidden/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetForbiddenAddressesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetForbiddenAddressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getForbiddenAddresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReservedSymbols lists reserved symbols

  List all reserved symbols
*/
func (a *Client) GetReservedSymbols(params *GetReservedSymbolsParams) (*GetReservedSymbolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReservedSymbolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReservedSymbols",
		Method:             "GET",
		PathPattern:        "/asset/tokens/reserved/symbols",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReservedSymbolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReservedSymbolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReservedSymbols: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetToken queries token

  Get token with provided `symbol`
*/
func (a *Client) GetToken(params *GetTokenParams) (*GetTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getToken",
		Method:             "GET",
		PathPattern:        "/asset/tokens/{symbol}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTokenList lists tokens

  List all existing tokens
*/
func (a *Client) GetTokenList(params *GetTokenListParams) (*GetTokenListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokenListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTokenList",
		Method:             "GET",
		PathPattern:        "/asset/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTokenListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTokenListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTokenList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWhitelist queries whitelist

  Get token whitelist with provided `symbol`
*/
func (a *Client) GetWhitelist(params *GetWhitelistParams) (*GetWhitelistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWhitelistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWhitelist",
		Method:             "GET",
		PathPattern:        "/asset/tokens/{symbol}/forbidden/whitelist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWhitelistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWhitelist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IssueToken issues token

  Issue a new Token
*/
func (a *Client) IssueToken(params *IssueTokenParams) (*IssueTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueToken",
		Method:             "POST",
		PathPattern:        "/asset/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MintToken mints token

  Mint mintable token
*/
func (a *Client) MintToken(params *MintTokenParams) (*MintTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMintTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "mintToken",
		Method:             "POST",
		PathPattern:        "/asset/tokens/{symbol}/mints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &MintTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MintTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mintToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ModifyTokenInfo modifies token info

  Modify token info
*/
func (a *Client) ModifyTokenInfo(params *ModifyTokenInfoParams) (*ModifyTokenInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyTokenInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyTokenInfo",
		Method:             "POST",
		PathPattern:        "/asset/tokens/{symbol}/infos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyTokenInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyTokenInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyTokenInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveWhitelist removes forbid whitelist

  Remove forbiddable token whitelist addr
*/
func (a *Client) RemoveWhitelist(params *RemoveWhitelistParams) (*RemoveWhitelistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveWhitelistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeWhitelist",
		Method:             "POST",
		PathPattern:        "/asset/tokens/{symbol}/unforbidden/whitelist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveWhitelistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeWhitelist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TransferOwnership transfers ownership

  Transfer token owner ship
*/
func (a *Client) TransferOwnership(params *TransferOwnershipParams) (*TransferOwnershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOwnershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transferOwnership",
		Method:             "POST",
		PathPattern:        "/asset/tokens/{symbol}/ownerships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TransferOwnershipReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferOwnershipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transferOwnership: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnForbidAddr uns forbid address

  Remove forbidden addresses
*/
func (a *Client) UnForbidAddr(params *UnForbidAddrParams) (*UnForbidAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnForbidAddrParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unForbidAddr",
		Method:             "POST",
		PathPattern:        "/asset/tokens/{symbol}/unforbidden/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnForbidAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnForbidAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unForbidAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnFrobidToken uns forbid token

  UnForbid forbiddable token
*/
func (a *Client) UnFrobidToken(params *UnFrobidTokenParams) (*UnFrobidTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnFrobidTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unFrobidToken",
		Method:             "POST",
		PathPattern:        "/asset/tokens/{symbol}/unforbids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnFrobidTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnFrobidTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unFrobidToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
