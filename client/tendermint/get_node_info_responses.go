// Code generated by go-swagger; DO NOT EDIT.

package tendermint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNodeInfoReader is a Reader for the GetNodeInfo structure.
type GetNodeInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodeInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodeInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetNodeInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNodeInfoOK creates a GetNodeInfoOK with default headers values
func NewGetNodeInfoOK() *GetNodeInfoOK {
	return &GetNodeInfoOK{}
}

/*GetNodeInfoOK handles this case with default header values.

Node status
*/
type GetNodeInfoOK struct {
	Payload *GetNodeInfoOKBody
}

func (o *GetNodeInfoOK) Error() string {
	return fmt.Sprintf("[GET /node_info][%d] getNodeInfoOK  %+v", 200, o.Payload)
}

func (o *GetNodeInfoOK) GetPayload() *GetNodeInfoOKBody {
	return o.Payload
}

func (o *GetNodeInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNodeInfoOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNodeInfoInternalServerError creates a GetNodeInfoInternalServerError with default headers values
func NewGetNodeInfoInternalServerError() *GetNodeInfoInternalServerError {
	return &GetNodeInfoInternalServerError{}
}

/*GetNodeInfoInternalServerError handles this case with default header values.

Failed to query node status
*/
type GetNodeInfoInternalServerError struct {
}

func (o *GetNodeInfoInternalServerError) Error() string {
	return fmt.Sprintf("[GET /node_info][%d] getNodeInfoInternalServerError ", 500)
}

func (o *GetNodeInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetNodeInfoOKBody get node info o k body
swagger:model GetNodeInfoOKBody
*/
type GetNodeInfoOKBody struct {

	// application version
	ApplicationVersion *GetNodeInfoOKBodyApplicationVersion `json:"application_version,omitempty"`

	// node info
	NodeInfo *GetNodeInfoOKBodyNodeInfo `json:"node_info,omitempty"`
}

// Validate validates this get node info o k body
func (o *GetNodeInfoOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApplicationVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNodeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodeInfoOKBody) validateApplicationVersion(formats strfmt.Registry) error {

	if swag.IsZero(o.ApplicationVersion) { // not required
		return nil
	}

	if o.ApplicationVersion != nil {
		if err := o.ApplicationVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodeInfoOK" + "." + "application_version")
			}
			return err
		}
	}

	return nil
}

func (o *GetNodeInfoOKBody) validateNodeInfo(formats strfmt.Registry) error {

	if swag.IsZero(o.NodeInfo) { // not required
		return nil
	}

	if o.NodeInfo != nil {
		if err := o.NodeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodeInfoOK" + "." + "node_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeInfoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeInfoOKBody) UnmarshalBinary(b []byte) error {
	var res GetNodeInfoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetNodeInfoOKBodyApplicationVersion get node info o k body application version
swagger:model GetNodeInfoOKBodyApplicationVersion
*/
type GetNodeInfoOKBodyApplicationVersion struct {

	// build tags
	BuildTags string `json:"build_tags,omitempty"`

	// client name
	ClientName string `json:"client_name,omitempty"`

	// commit
	Commit string `json:"commit,omitempty"`

	// go
	Go string `json:"go,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// server name
	ServerName string `json:"server_name,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this get node info o k body application version
func (o *GetNodeInfoOKBodyApplicationVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeInfoOKBodyApplicationVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeInfoOKBodyApplicationVersion) UnmarshalBinary(b []byte) error {
	var res GetNodeInfoOKBodyApplicationVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetNodeInfoOKBodyNodeInfo get node info o k body node info
swagger:model GetNodeInfoOKBodyNodeInfo
*/
type GetNodeInfoOKBodyNodeInfo struct {

	// channels
	Channels string `json:"channels,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// listen addr
	ListenAddr string `json:"listen_addr,omitempty"`

	// moniker
	Moniker string `json:"moniker,omitempty"`

	// network
	Network string `json:"network,omitempty"`

	// other
	Other *GetNodeInfoOKBodyNodeInfoOther `json:"other,omitempty"`

	// protocol version
	ProtocolVersion *GetNodeInfoOKBodyNodeInfoProtocolVersion `json:"protocol_version,omitempty"`

	// Tendermint version
	Version string `json:"version,omitempty"`
}

// Validate validates this get node info o k body node info
func (o *GetNodeInfoOKBodyNodeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOther(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProtocolVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodeInfoOKBodyNodeInfo) validateOther(formats strfmt.Registry) error {

	if swag.IsZero(o.Other) { // not required
		return nil
	}

	if o.Other != nil {
		if err := o.Other.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodeInfoOK" + "." + "node_info" + "." + "other")
			}
			return err
		}
	}

	return nil
}

func (o *GetNodeInfoOKBodyNodeInfo) validateProtocolVersion(formats strfmt.Registry) error {

	if swag.IsZero(o.ProtocolVersion) { // not required
		return nil
	}

	if o.ProtocolVersion != nil {
		if err := o.ProtocolVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodeInfoOK" + "." + "node_info" + "." + "protocol_version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeInfoOKBodyNodeInfo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeInfoOKBodyNodeInfo) UnmarshalBinary(b []byte) error {
	var res GetNodeInfoOKBodyNodeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetNodeInfoOKBodyNodeInfoOther more information on versions
swagger:model GetNodeInfoOKBodyNodeInfoOther
*/
type GetNodeInfoOKBodyNodeInfoOther struct {

	// rpc address
	RPCAddress string `json:"rpc_address,omitempty"`

	// tx index
	TxIndex string `json:"tx_index,omitempty"`
}

// Validate validates this get node info o k body node info other
func (o *GetNodeInfoOKBodyNodeInfoOther) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeInfoOKBodyNodeInfoOther) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeInfoOKBodyNodeInfoOther) UnmarshalBinary(b []byte) error {
	var res GetNodeInfoOKBodyNodeInfoOther
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetNodeInfoOKBodyNodeInfoProtocolVersion get node info o k body node info protocol version
swagger:model GetNodeInfoOKBodyNodeInfoProtocolVersion
*/
type GetNodeInfoOKBodyNodeInfoProtocolVersion struct {

	// app
	App string `json:"app,omitempty"`

	// block
	Block string `json:"block,omitempty"`

	// p2p
	P2p string `json:"p2p,omitempty"`
}

// Validate validates this get node info o k body node info protocol version
func (o *GetNodeInfoOKBodyNodeInfoProtocolVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeInfoOKBodyNodeInfoProtocolVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeInfoOKBodyNodeInfoProtocolVersion) UnmarshalBinary(b []byte) error {
	var res GetNodeInfoOKBodyNodeInfoProtocolVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
