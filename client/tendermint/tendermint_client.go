// Code generated by go-swagger; DO NOT EDIT.

package tendermint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tendermint API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tendermint API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetBlock(params *GetBlockParams) (*GetBlockOK, error)

	GetLatestBlock(params *GetLatestBlockParams) (*GetLatestBlockOK, error)

	GetLatestValidatorSet(params *GetLatestValidatorSetParams) (*GetLatestValidatorSetOK, error)

	GetNodeInfo(params *GetNodeInfoParams) (*GetNodeInfoOK, error)

	GetSyncing(params *GetSyncingParams) (*GetSyncingOK, error)

	GetValidatorSet(params *GetValidatorSetParams) (*GetValidatorSetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetBlock gets a block at a certain height
*/
func (a *Client) GetBlock(params *GetBlockParams) (*GetBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlock",
		Method:             "GET",
		PathPattern:        "/blocks/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLatestBlock gets the latest block
*/
func (a *Client) GetLatestBlock(params *GetLatestBlockParams) (*GetLatestBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLatestBlock",
		Method:             "GET",
		PathPattern:        "/blocks/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLatestBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLatestBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLatestBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLatestValidatorSet gets the latest validator set
*/
func (a *Client) GetLatestValidatorSet(params *GetLatestValidatorSetParams) (*GetLatestValidatorSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestValidatorSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLatestValidatorSet",
		Method:             "GET",
		PathPattern:        "/validatorsets/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLatestValidatorSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLatestValidatorSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLatestValidatorSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNodeInfo thes properties of the connected node

  Information about the connected node
*/
func (a *Client) GetNodeInfo(params *GetNodeInfoParams) (*GetNodeInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeInfo",
		Method:             "GET",
		PathPattern:        "/node_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNodeInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodeInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNodeInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSyncing syncings state of node

  Get if the node is currently syning with other nodes
*/
func (a *Client) GetSyncing(params *GetSyncingParams) (*GetSyncingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSyncingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSyncing",
		Method:             "GET",
		PathPattern:        "/syncing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSyncingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSyncingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSyncing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetValidatorSet gets a validator set a certain height
*/
func (a *Client) GetValidatorSet(params *GetValidatorSetParams) (*GetValidatorSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidatorSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getValidatorSet",
		Method:             "GET",
		PathPattern:        "/validatorsets/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetValidatorSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidatorSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidatorSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
