// Code generated by go-swagger; DO NOT EDIT.

package governance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/coinexchain/dex-api-go/models"
)

// VoteProposalReader is a Reader for the VoteProposal structure.
type VoteProposalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VoteProposalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVoteProposalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVoteProposalBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewVoteProposalUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVoteProposalInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewVoteProposalOK creates a VoteProposalOK with default headers values
func NewVoteProposalOK() *VoteProposalOK {
	return &VoteProposalOK{}
}

/*VoteProposalOK handles this case with default header values.

OK
*/
type VoteProposalOK struct {
	Payload *models.BroadcastTxCommitResult
}

func (o *VoteProposalOK) Error() string {
	return fmt.Sprintf("[POST /gov/proposals/{proposalId}/votes][%d] voteProposalOK  %+v", 200, o.Payload)
}

func (o *VoteProposalOK) GetPayload() *models.BroadcastTxCommitResult {
	return o.Payload
}

func (o *VoteProposalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BroadcastTxCommitResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoteProposalBadRequest creates a VoteProposalBadRequest with default headers values
func NewVoteProposalBadRequest() *VoteProposalBadRequest {
	return &VoteProposalBadRequest{}
}

/*VoteProposalBadRequest handles this case with default header values.

Invalid proposal id or vote body
*/
type VoteProposalBadRequest struct {
}

func (o *VoteProposalBadRequest) Error() string {
	return fmt.Sprintf("[POST /gov/proposals/{proposalId}/votes][%d] voteProposalBadRequest ", 400)
}

func (o *VoteProposalBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVoteProposalUnauthorized creates a VoteProposalUnauthorized with default headers values
func NewVoteProposalUnauthorized() *VoteProposalUnauthorized {
	return &VoteProposalUnauthorized{}
}

/*VoteProposalUnauthorized handles this case with default header values.

Key password is wrong
*/
type VoteProposalUnauthorized struct {
}

func (o *VoteProposalUnauthorized) Error() string {
	return fmt.Sprintf("[POST /gov/proposals/{proposalId}/votes][%d] voteProposalUnauthorized ", 401)
}

func (o *VoteProposalUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVoteProposalInternalServerError creates a VoteProposalInternalServerError with default headers values
func NewVoteProposalInternalServerError() *VoteProposalInternalServerError {
	return &VoteProposalInternalServerError{}
}

/*VoteProposalInternalServerError handles this case with default header values.

Internal Server Error
*/
type VoteProposalInternalServerError struct {
}

func (o *VoteProposalInternalServerError) Error() string {
	return fmt.Sprintf("[POST /gov/proposals/{proposalId}/votes][%d] voteProposalInternalServerError ", 500)
}

func (o *VoteProposalInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*VoteProposalBody vote proposal body
swagger:model VoteProposalBody
*/
type VoteProposalBody struct {

	// base req
	BaseReq *models.BaseReq `json:"base_req,omitempty"`

	// option
	Option string `json:"option,omitempty"`

	// voter
	Voter models.Address `json:"voter,omitempty"`
}

// Validate validates this vote proposal body
func (o *VoteProposalBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVoter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VoteProposalBody) validateBaseReq(formats strfmt.Registry) error {

	if swag.IsZero(o.BaseReq) { // not required
		return nil
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_vote_body" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

func (o *VoteProposalBody) validateVoter(formats strfmt.Registry) error {

	if swag.IsZero(o.Voter) { // not required
		return nil
	}

	if err := o.Voter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_vote_body" + "." + "voter")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VoteProposalBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VoteProposalBody) UnmarshalBinary(b []byte) error {
	var res VoteProposalBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
