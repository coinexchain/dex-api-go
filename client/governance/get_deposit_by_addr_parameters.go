// Code generated by go-swagger; DO NOT EDIT.

package governance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetDepositByAddrParams creates a new GetDepositByAddrParams object
// with the default values initialized.
func NewGetDepositByAddrParams() *GetDepositByAddrParams {
	var ()
	return &GetDepositByAddrParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDepositByAddrParamsWithTimeout creates a new GetDepositByAddrParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDepositByAddrParamsWithTimeout(timeout time.Duration) *GetDepositByAddrParams {
	var ()
	return &GetDepositByAddrParams{

		timeout: timeout,
	}
}

// NewGetDepositByAddrParamsWithContext creates a new GetDepositByAddrParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDepositByAddrParamsWithContext(ctx context.Context) *GetDepositByAddrParams {
	var ()
	return &GetDepositByAddrParams{

		Context: ctx,
	}
}

// NewGetDepositByAddrParamsWithHTTPClient creates a new GetDepositByAddrParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDepositByAddrParamsWithHTTPClient(client *http.Client) *GetDepositByAddrParams {
	var ()
	return &GetDepositByAddrParams{
		HTTPClient: client,
	}
}

/*GetDepositByAddrParams contains all the parameters to send to the API endpoint
for the get deposit by addr operation typically these are written to a http.Request
*/
type GetDepositByAddrParams struct {

	/*Depositor
	  Bech32 depositor address

	*/
	Depositor string
	/*ProposalID
	  proposal id

	*/
	ProposalID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get deposit by addr params
func (o *GetDepositByAddrParams) WithTimeout(timeout time.Duration) *GetDepositByAddrParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get deposit by addr params
func (o *GetDepositByAddrParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get deposit by addr params
func (o *GetDepositByAddrParams) WithContext(ctx context.Context) *GetDepositByAddrParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get deposit by addr params
func (o *GetDepositByAddrParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get deposit by addr params
func (o *GetDepositByAddrParams) WithHTTPClient(client *http.Client) *GetDepositByAddrParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get deposit by addr params
func (o *GetDepositByAddrParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDepositor adds the depositor to the get deposit by addr params
func (o *GetDepositByAddrParams) WithDepositor(depositor string) *GetDepositByAddrParams {
	o.SetDepositor(depositor)
	return o
}

// SetDepositor adds the depositor to the get deposit by addr params
func (o *GetDepositByAddrParams) SetDepositor(depositor string) {
	o.Depositor = depositor
}

// WithProposalID adds the proposalID to the get deposit by addr params
func (o *GetDepositByAddrParams) WithProposalID(proposalID string) *GetDepositByAddrParams {
	o.SetProposalID(proposalID)
	return o
}

// SetProposalID adds the proposalId to the get deposit by addr params
func (o *GetDepositByAddrParams) SetProposalID(proposalID string) {
	o.ProposalID = proposalID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDepositByAddrParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param depositor
	if err := r.SetPathParam("depositor", o.Depositor); err != nil {
		return err
	}

	// path param proposalId
	if err := r.SetPathParam("proposalId", o.ProposalID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
