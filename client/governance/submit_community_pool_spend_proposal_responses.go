// Code generated by go-swagger; DO NOT EDIT.

package governance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/coinexchain/dex-api-go/models"
)

// SubmitCommunityPoolSpendProposalReader is a Reader for the SubmitCommunityPoolSpendProposal structure.
type SubmitCommunityPoolSpendProposalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubmitCommunityPoolSpendProposalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubmitCommunityPoolSpendProposalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubmitCommunityPoolSpendProposalBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubmitCommunityPoolSpendProposalInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSubmitCommunityPoolSpendProposalOK creates a SubmitCommunityPoolSpendProposalOK with default headers values
func NewSubmitCommunityPoolSpendProposalOK() *SubmitCommunityPoolSpendProposalOK {
	return &SubmitCommunityPoolSpendProposalOK{}
}

/*SubmitCommunityPoolSpendProposalOK handles this case with default header values.

The transaction was succesfully generated
*/
type SubmitCommunityPoolSpendProposalOK struct {
	Payload *models.StdTx
}

func (o *SubmitCommunityPoolSpendProposalOK) Error() string {
	return fmt.Sprintf("[POST /gov/proposals/community_pool_spend][%d] submitCommunityPoolSpendProposalOK  %+v", 200, o.Payload)
}

func (o *SubmitCommunityPoolSpendProposalOK) GetPayload() *models.StdTx {
	return o.Payload
}

func (o *SubmitCommunityPoolSpendProposalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StdTx)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitCommunityPoolSpendProposalBadRequest creates a SubmitCommunityPoolSpendProposalBadRequest with default headers values
func NewSubmitCommunityPoolSpendProposalBadRequest() *SubmitCommunityPoolSpendProposalBadRequest {
	return &SubmitCommunityPoolSpendProposalBadRequest{}
}

/*SubmitCommunityPoolSpendProposalBadRequest handles this case with default header values.

Invalid proposal body
*/
type SubmitCommunityPoolSpendProposalBadRequest struct {
}

func (o *SubmitCommunityPoolSpendProposalBadRequest) Error() string {
	return fmt.Sprintf("[POST /gov/proposals/community_pool_spend][%d] submitCommunityPoolSpendProposalBadRequest ", 400)
}

func (o *SubmitCommunityPoolSpendProposalBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubmitCommunityPoolSpendProposalInternalServerError creates a SubmitCommunityPoolSpendProposalInternalServerError with default headers values
func NewSubmitCommunityPoolSpendProposalInternalServerError() *SubmitCommunityPoolSpendProposalInternalServerError {
	return &SubmitCommunityPoolSpendProposalInternalServerError{}
}

/*SubmitCommunityPoolSpendProposalInternalServerError handles this case with default header values.

Internal Server Error
*/
type SubmitCommunityPoolSpendProposalInternalServerError struct {
}

func (o *SubmitCommunityPoolSpendProposalInternalServerError) Error() string {
	return fmt.Sprintf("[POST /gov/proposals/community_pool_spend][%d] submitCommunityPoolSpendProposalInternalServerError ", 500)
}

func (o *SubmitCommunityPoolSpendProposalInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*SubmitCommunityPoolSpendProposalBody submit community pool spend proposal body
swagger:model SubmitCommunityPoolSpendProposalBody
*/
type SubmitCommunityPoolSpendProposalBody struct {

	// amount
	// Required: true
	Amount []*models.Coin `json:"amount"`

	// base req
	// Required: true
	BaseReq *models.BaseReq `json:"base_req"`

	// deposit
	// Required: true
	Deposit []*models.Coin `json:"deposit"`

	// description
	// Required: true
	Description *string `json:"description"`

	// proposer
	// Required: true
	Proposer models.Address `json:"proposer"`

	// recipient
	// Required: true
	Recipient models.Address `json:"recipient"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this submit community pool spend proposal body
func (o *SubmitCommunityPoolSpendProposalBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeposit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProposer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipient(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubmitCommunityPoolSpendProposalBody) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("post_proposal_body"+"."+"amount", "body", o.Amount); err != nil {
		return err
	}

	for i := 0; i < len(o.Amount); i++ {
		if swag.IsZero(o.Amount[i]) { // not required
			continue
		}

		if o.Amount[i] != nil {
			if err := o.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("post_proposal_body" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SubmitCommunityPoolSpendProposalBody) validateBaseReq(formats strfmt.Registry) error {

	if err := validate.Required("post_proposal_body"+"."+"base_req", "body", o.BaseReq); err != nil {
		return err
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_proposal_body" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

func (o *SubmitCommunityPoolSpendProposalBody) validateDeposit(formats strfmt.Registry) error {

	if err := validate.Required("post_proposal_body"+"."+"deposit", "body", o.Deposit); err != nil {
		return err
	}

	for i := 0; i < len(o.Deposit); i++ {
		if swag.IsZero(o.Deposit[i]) { // not required
			continue
		}

		if o.Deposit[i] != nil {
			if err := o.Deposit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("post_proposal_body" + "." + "deposit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SubmitCommunityPoolSpendProposalBody) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("post_proposal_body"+"."+"description", "body", o.Description); err != nil {
		return err
	}

	return nil
}

func (o *SubmitCommunityPoolSpendProposalBody) validateProposer(formats strfmt.Registry) error {

	if err := o.Proposer.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_proposal_body" + "." + "proposer")
		}
		return err
	}

	return nil
}

func (o *SubmitCommunityPoolSpendProposalBody) validateRecipient(formats strfmt.Registry) error {

	if err := o.Recipient.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_proposal_body" + "." + "recipient")
		}
		return err
	}

	return nil
}

func (o *SubmitCommunityPoolSpendProposalBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("post_proposal_body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SubmitCommunityPoolSpendProposalBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubmitCommunityPoolSpendProposalBody) UnmarshalBinary(b []byte) error {
	var res SubmitCommunityPoolSpendProposalBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
