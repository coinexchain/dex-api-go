// Code generated by go-swagger; DO NOT EDIT.

package governance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new governance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for governance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DepositToProposal(params *DepositToProposalParams) (*DepositToProposalOK, error)

	GetDepositByAddr(params *GetDepositByAddrParams) (*GetDepositByAddrOK, error)

	GetDepositParameters(params *GetDepositParametersParams) (*GetDepositParametersOK, error)

	GetDeposits(params *GetDepositsParams) (*GetDepositsOK, error)

	GetProposalByID(params *GetProposalByIDParams) (*GetProposalByIDOK, error)

	GetProposals(params *GetProposalsParams) (*GetProposalsOK, error)

	GetProposer(params *GetProposerParams) (*GetProposerOK, error)

	GetTally(params *GetTallyParams) (*GetTallyOK, error)

	GetTallyingParameters(params *GetTallyingParametersParams) (*GetTallyingParametersOK, error)

	GetVoterByAddr(params *GetVoterByAddrParams) (*GetVoterByAddrOK, error)

	GetVoters(params *GetVotersParams) (*GetVotersOK, error)

	GetVotingParameters(params *GetVotingParametersParams) (*GetVotingParametersOK, error)

	SubmitCommunityPoolSpendProposal(params *SubmitCommunityPoolSpendProposalParams) (*SubmitCommunityPoolSpendProposalOK, error)

	SubmitParameterChangeProposal(params *SubmitParameterChangeProposalParams) (*SubmitParameterChangeProposalOK, error)

	SubmitProposal(params *SubmitProposalParams) (*SubmitProposalOK, error)

	VoteProposal(params *VoteProposalParams) (*VoteProposalOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DepositToProposal deposits tokens to a proposal

  Send transaction to deposit tokens to a proposal
*/
func (a *Client) DepositToProposal(params *DepositToProposalParams) (*DepositToProposalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepositToProposalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "depositToProposal",
		Method:             "POST",
		PathPattern:        "/gov/proposals/{proposalId}/deposits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DepositToProposalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DepositToProposalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for depositToProposal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDepositByAddr queries deposit

  Query deposit by proposalId and depositor address
*/
func (a *Client) GetDepositByAddr(params *GetDepositByAddrParams) (*GetDepositByAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDepositByAddrParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDepositByAddr",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}/deposits/{depositor}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDepositByAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDepositByAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDepositByAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDepositParameters queries governance deposit parameters

  Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
*/
func (a *Client) GetDepositParameters(params *GetDepositParametersParams) (*GetDepositParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDepositParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDepositParameters",
		Method:             "GET",
		PathPattern:        "/gov/parameters/deposit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDepositParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDepositParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDepositParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeposits queries deposits

  Query deposits by proposalId
*/
func (a *Client) GetDeposits(params *GetDepositsParams) (*GetDepositsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDepositsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeposits",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}/deposits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDepositsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDepositsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeposits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProposalByID queries a proposal

  Query a proposal by id
*/
func (a *Client) GetProposalByID(params *GetProposalByIDParams) (*GetProposalByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProposalByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProposalByID",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProposalByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProposalByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProposalByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProposals queries proposals

  Query proposals information with parameters
*/
func (a *Client) GetProposals(params *GetProposalsParams) (*GetProposalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProposalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProposals",
		Method:             "GET",
		PathPattern:        "/gov/proposals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProposalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProposalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProposals: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProposer queries proposer

  Query for the proposer for a proposal
*/
func (a *Client) GetProposer(params *GetProposerParams) (*GetProposerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProposerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProposer",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}/proposer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProposerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProposerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProposer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTally gets a proposal s tally result at the current time

  Gets a proposal's tally result at the current time. If the proposal is pending deposits (i.e status 'DepositPeriod') it returns an empty tally result.
*/
func (a *Client) GetTally(params *GetTallyParams) (*GetTallyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTallyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTally",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}/tally",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTallyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTallyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTally: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTallyingParameters queries governance tally parameters

  Query governance tally parameters
*/
func (a *Client) GetTallyingParameters(params *GetTallyingParametersParams) (*GetTallyingParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTallyingParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTallyingParameters",
		Method:             "GET",
		PathPattern:        "/gov/parameters/tallying",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTallyingParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTallyingParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTallyingParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVoterByAddr queries vote

  Query vote information by proposal Id and voter address
*/
func (a *Client) GetVoterByAddr(params *GetVoterByAddrParams) (*GetVoterByAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoterByAddrParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVoterByAddr",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}/votes/{voter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVoterByAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoterByAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVoterByAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVoters queries voters

  Query voters information by proposalId
*/
func (a *Client) GetVoters(params *GetVotersParams) (*GetVotersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVotersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVoters",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}/votes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVotersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVotersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVoters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVotingParameters queries governance voting parameters

  Query governance voting parameters. The voting_period units are in nanoseconds.
*/
func (a *Client) GetVotingParameters(params *GetVotingParametersParams) (*GetVotingParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVotingParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVotingParameters",
		Method:             "GET",
		PathPattern:        "/gov/parameters/voting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVotingParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVotingParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVotingParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubmitCommunityPoolSpendProposal generates a community pool spend proposal transaction

  Generate a community pool spend proposal transaction
*/
func (a *Client) SubmitCommunityPoolSpendProposal(params *SubmitCommunityPoolSpendProposalParams) (*SubmitCommunityPoolSpendProposalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitCommunityPoolSpendProposalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitCommunityPoolSpendProposal",
		Method:             "POST",
		PathPattern:        "/gov/proposals/community_pool_spend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitCommunityPoolSpendProposalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitCommunityPoolSpendProposalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitCommunityPoolSpendProposal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubmitParameterChangeProposal generates a parameter change proposal transaction

  Generate a parameter change proposal transaction
*/
func (a *Client) SubmitParameterChangeProposal(params *SubmitParameterChangeProposalParams) (*SubmitParameterChangeProposalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitParameterChangeProposalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitParameterChangeProposal",
		Method:             "POST",
		PathPattern:        "/gov/proposals/param_change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitParameterChangeProposalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitParameterChangeProposalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitParameterChangeProposal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubmitProposal submits a proposal

  Send transaction to submit a proposal
*/
func (a *Client) SubmitProposal(params *SubmitProposalParams) (*SubmitProposalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitProposalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitProposal",
		Method:             "POST",
		PathPattern:        "/gov/proposals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitProposalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitProposalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitProposal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VoteProposal votes a proposal

  Send transaction to vote a proposal
*/
func (a *Client) VoteProposal(params *VoteProposalParams) (*VoteProposalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoteProposalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "voteProposal",
		Method:             "POST",
		PathPattern:        "/gov/proposals/{proposalId}/votes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VoteProposalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoteProposalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for voteProposal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
