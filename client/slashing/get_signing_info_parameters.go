// Code generated by go-swagger; DO NOT EDIT.

package slashing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSigningInfoParams creates a new GetSigningInfoParams object
// with the default values initialized.
func NewGetSigningInfoParams() *GetSigningInfoParams {
	var ()
	return &GetSigningInfoParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSigningInfoParamsWithTimeout creates a new GetSigningInfoParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSigningInfoParamsWithTimeout(timeout time.Duration) *GetSigningInfoParams {
	var ()
	return &GetSigningInfoParams{

		timeout: timeout,
	}
}

// NewGetSigningInfoParamsWithContext creates a new GetSigningInfoParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSigningInfoParamsWithContext(ctx context.Context) *GetSigningInfoParams {
	var ()
	return &GetSigningInfoParams{

		Context: ctx,
	}
}

// NewGetSigningInfoParamsWithHTTPClient creates a new GetSigningInfoParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSigningInfoParamsWithHTTPClient(client *http.Client) *GetSigningInfoParams {
	var ()
	return &GetSigningInfoParams{
		HTTPClient: client,
	}
}

/*GetSigningInfoParams contains all the parameters to send to the API endpoint
for the get signing info operation typically these are written to a http.Request
*/
type GetSigningInfoParams struct {

	/*ValidatorPubKey
	  Bech32 validator public key

	*/
	ValidatorPubKey string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get signing info params
func (o *GetSigningInfoParams) WithTimeout(timeout time.Duration) *GetSigningInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get signing info params
func (o *GetSigningInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get signing info params
func (o *GetSigningInfoParams) WithContext(ctx context.Context) *GetSigningInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get signing info params
func (o *GetSigningInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get signing info params
func (o *GetSigningInfoParams) WithHTTPClient(client *http.Client) *GetSigningInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get signing info params
func (o *GetSigningInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithValidatorPubKey adds the validatorPubKey to the get signing info params
func (o *GetSigningInfoParams) WithValidatorPubKey(validatorPubKey string) *GetSigningInfoParams {
	o.SetValidatorPubKey(validatorPubKey)
	return o
}

// SetValidatorPubKey adds the validatorPubKey to the get signing info params
func (o *GetSigningInfoParams) SetValidatorPubKey(validatorPubKey string) {
	o.ValidatorPubKey = validatorPubKey
}

// WriteToRequest writes these params to a swagger request
func (o *GetSigningInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param validatorPubKey
	if err := r.SetPathParam("validatorPubKey", o.ValidatorPubKey); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
