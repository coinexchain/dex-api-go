// Code generated by go-swagger; DO NOT EDIT.

package slashing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSlashingParamsReader is a Reader for the GetSlashingParams structure.
type GetSlashingParamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSlashingParamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSlashingParamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetSlashingParamsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSlashingParamsOK creates a GetSlashingParamsOK with default headers values
func NewGetSlashingParamsOK() *GetSlashingParamsOK {
	return &GetSlashingParamsOK{}
}

/*GetSlashingParamsOK handles this case with default header values.

OK
*/
type GetSlashingParamsOK struct {
	Payload *GetSlashingParamsOKBody
}

func (o *GetSlashingParamsOK) Error() string {
	return fmt.Sprintf("[GET /slashing/parameters][%d] getSlashingParamsOK  %+v", 200, o.Payload)
}

func (o *GetSlashingParamsOK) GetPayload() *GetSlashingParamsOKBody {
	return o.Payload
}

func (o *GetSlashingParamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSlashingParamsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSlashingParamsInternalServerError creates a GetSlashingParamsInternalServerError with default headers values
func NewGetSlashingParamsInternalServerError() *GetSlashingParamsInternalServerError {
	return &GetSlashingParamsInternalServerError{}
}

/*GetSlashingParamsInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetSlashingParamsInternalServerError struct {
}

func (o *GetSlashingParamsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /slashing/parameters][%d] getSlashingParamsInternalServerError ", 500)
}

func (o *GetSlashingParamsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetSlashingParamsOKBody get slashing params o k body
swagger:model GetSlashingParamsOKBody
*/
type GetSlashingParamsOKBody struct {

	// height
	Height string `json:"height,omitempty"`

	// result
	Result *GetSlashingParamsOKBodyResult `json:"result,omitempty"`
}

// Validate validates this get slashing params o k body
func (o *GetSlashingParamsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSlashingParamsOKBody) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSlashingParamsOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSlashingParamsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSlashingParamsOKBody) UnmarshalBinary(b []byte) error {
	var res GetSlashingParamsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSlashingParamsOKBodyResult get slashing params o k body result
swagger:model GetSlashingParamsOKBodyResult
*/
type GetSlashingParamsOKBodyResult struct {

	// double sign unbond duration
	// Required: true
	DoubleSignUnbondDuration *string `json:"double_sign_unbond_duration"`

	// downtime unbond duration
	// Required: true
	DowntimeUnbondDuration *string `json:"downtime_unbond_duration"`

	// max evidence age
	// Required: true
	MaxEvidenceAge *string `json:"max_evidence_age"`

	// min signed per window
	// Required: true
	MinSignedPerWindow *string `json:"min_signed_per_window"`

	// signed blocks window
	// Required: true
	SignedBlocksWindow *string `json:"signed_blocks_window"`

	// slash fraction double sign
	// Required: true
	SlashFractionDoubleSign *string `json:"slash_fraction_double_sign"`

	// slash fraction downtime
	// Required: true
	SlashFractionDowntime *string `json:"slash_fraction_downtime"`
}

// Validate validates this get slashing params o k body result
func (o *GetSlashingParamsOKBodyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDoubleSignUnbondDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDowntimeUnbondDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMaxEvidenceAge(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMinSignedPerWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignedBlocksWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlashFractionDoubleSign(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlashFractionDowntime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSlashingParamsOKBodyResult) validateDoubleSignUnbondDuration(formats strfmt.Registry) error {

	if err := validate.Required("getSlashingParamsOK"+"."+"result"+"."+"double_sign_unbond_duration", "body", o.DoubleSignUnbondDuration); err != nil {
		return err
	}

	return nil
}

func (o *GetSlashingParamsOKBodyResult) validateDowntimeUnbondDuration(formats strfmt.Registry) error {

	if err := validate.Required("getSlashingParamsOK"+"."+"result"+"."+"downtime_unbond_duration", "body", o.DowntimeUnbondDuration); err != nil {
		return err
	}

	return nil
}

func (o *GetSlashingParamsOKBodyResult) validateMaxEvidenceAge(formats strfmt.Registry) error {

	if err := validate.Required("getSlashingParamsOK"+"."+"result"+"."+"max_evidence_age", "body", o.MaxEvidenceAge); err != nil {
		return err
	}

	return nil
}

func (o *GetSlashingParamsOKBodyResult) validateMinSignedPerWindow(formats strfmt.Registry) error {

	if err := validate.Required("getSlashingParamsOK"+"."+"result"+"."+"min_signed_per_window", "body", o.MinSignedPerWindow); err != nil {
		return err
	}

	return nil
}

func (o *GetSlashingParamsOKBodyResult) validateSignedBlocksWindow(formats strfmt.Registry) error {

	if err := validate.Required("getSlashingParamsOK"+"."+"result"+"."+"signed_blocks_window", "body", o.SignedBlocksWindow); err != nil {
		return err
	}

	return nil
}

func (o *GetSlashingParamsOKBodyResult) validateSlashFractionDoubleSign(formats strfmt.Registry) error {

	if err := validate.Required("getSlashingParamsOK"+"."+"result"+"."+"slash_fraction_double_sign", "body", o.SlashFractionDoubleSign); err != nil {
		return err
	}

	return nil
}

func (o *GetSlashingParamsOKBodyResult) validateSlashFractionDowntime(formats strfmt.Registry) error {

	if err := validate.Required("getSlashingParamsOK"+"."+"result"+"."+"slash_fraction_downtime", "body", o.SlashFractionDowntime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSlashingParamsOKBodyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSlashingParamsOKBodyResult) UnmarshalBinary(b []byte) error {
	var res GetSlashingParamsOKBodyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
