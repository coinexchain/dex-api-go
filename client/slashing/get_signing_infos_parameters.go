// Code generated by go-swagger; DO NOT EDIT.

package slashing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSigningInfosParams creates a new GetSigningInfosParams object
// with the default values initialized.
func NewGetSigningInfosParams() *GetSigningInfosParams {
	var ()
	return &GetSigningInfosParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSigningInfosParamsWithTimeout creates a new GetSigningInfosParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSigningInfosParamsWithTimeout(timeout time.Duration) *GetSigningInfosParams {
	var ()
	return &GetSigningInfosParams{

		timeout: timeout,
	}
}

// NewGetSigningInfosParamsWithContext creates a new GetSigningInfosParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSigningInfosParamsWithContext(ctx context.Context) *GetSigningInfosParams {
	var ()
	return &GetSigningInfosParams{

		Context: ctx,
	}
}

// NewGetSigningInfosParamsWithHTTPClient creates a new GetSigningInfosParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSigningInfosParamsWithHTTPClient(client *http.Client) *GetSigningInfosParams {
	var ()
	return &GetSigningInfosParams{
		HTTPClient: client,
	}
}

/*GetSigningInfosParams contains all the parameters to send to the API endpoint
for the get signing infos operation typically these are written to a http.Request
*/
type GetSigningInfosParams struct {

	/*Limit
	  Maximum number of items per page

	*/
	Limit int64
	/*Page
	  Page number

	*/
	Page int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get signing infos params
func (o *GetSigningInfosParams) WithTimeout(timeout time.Duration) *GetSigningInfosParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get signing infos params
func (o *GetSigningInfosParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get signing infos params
func (o *GetSigningInfosParams) WithContext(ctx context.Context) *GetSigningInfosParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get signing infos params
func (o *GetSigningInfosParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get signing infos params
func (o *GetSigningInfosParams) WithHTTPClient(client *http.Client) *GetSigningInfosParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get signing infos params
func (o *GetSigningInfosParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get signing infos params
func (o *GetSigningInfosParams) WithLimit(limit int64) *GetSigningInfosParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get signing infos params
func (o *GetSigningInfosParams) SetLimit(limit int64) {
	o.Limit = limit
}

// WithPage adds the page to the get signing infos params
func (o *GetSigningInfosParams) WithPage(page int64) *GetSigningInfosParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get signing infos params
func (o *GetSigningInfosParams) SetPage(page int64) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *GetSigningInfosParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param limit
	qrLimit := o.Limit
	qLimit := swag.FormatInt64(qrLimit)
	if qLimit != "" {
		if err := r.SetQueryParam("limit", qLimit); err != nil {
			return err
		}
	}

	// query param page
	qrPage := o.Page
	qPage := swag.FormatInt64(qrPage)
	if qPage != "" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
