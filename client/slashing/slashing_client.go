// Code generated by go-swagger; DO NOT EDIT.

package slashing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new slashing API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for slashing API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetSigningInfo(params *GetSigningInfoParams) (*GetSigningInfoOK, *GetSigningInfoNoContent, error)

	GetSigningInfos(params *GetSigningInfosParams) (*GetSigningInfosOK, error)

	GetSlashingParams(params *GetSlashingParamsParams) (*GetSlashingParamsOK, error)

	UnjailValidator(params *UnjailValidatorParams) (*UnjailValidatorOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetSigningInfo gets sign info of given validator

  Get sign info of given validator
*/
func (a *Client) GetSigningInfo(params *GetSigningInfoParams) (*GetSigningInfoOK, *GetSigningInfoNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSigningInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSigningInfo",
		Method:             "GET",
		PathPattern:        "/slashing/validators/{validatorPubKey}/signing_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSigningInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetSigningInfoOK:
		return value, nil, nil
	case *GetSigningInfoNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for slashing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSigningInfos gets sign info of given all validators

  Get sign info of all validators
*/
func (a *Client) GetSigningInfos(params *GetSigningInfosParams) (*GetSigningInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSigningInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSigningInfos",
		Method:             "GET",
		PathPattern:        "/slashing/signing_infos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSigningInfosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSigningInfosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSigningInfos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSlashingParams gets the current slashing parameters
*/
func (a *Client) GetSlashingParams(params *GetSlashingParamsParams) (*GetSlashingParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSlashingParamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSlashingParams",
		Method:             "GET",
		PathPattern:        "/slashing/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSlashingParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSlashingParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSlashingParams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnjailValidator unjails a jailed validator

  Send transaction to unjail a jailed validator
*/
func (a *Client) UnjailValidator(params *UnjailValidatorParams) (*UnjailValidatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnjailValidatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unjailValidator",
		Method:             "POST",
		PathPattern:        "/slashing/validators/{validatorAddr}/unjail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnjailValidatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnjailValidatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unjailValidator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
