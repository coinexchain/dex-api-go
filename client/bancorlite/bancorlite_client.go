// Code generated by go-swagger; DO NOT EDIT.

package bancorlite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new bancorlite API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bancorlite API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BancorCancel(params *BancorCancelParams) (*BancorCancelOK, error)

	BancorInit(params *BancorInitParams) (*BancorInitOK, error)

	BancorTrade(params *BancorTradeParams) (*BancorTradeOK, error)

	GetBancorInfo(params *GetBancorInfoParams) (*GetBancorInfoOK, error)

	GetBancorInfos(params *GetBancorInfosParams) (*GetBancorInfosOK, error)

	GetBancorliteParams(params *GetBancorliteParamsParams) (*GetBancorliteParamsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BancorCancel cancels bancor
*/
func (a *Client) BancorCancel(params *BancorCancelParams) (*BancorCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBancorCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bancorCancel",
		Method:             "POST",
		PathPattern:        "/bancorlite/bancor-cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BancorCancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BancorCancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bancorCancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BancorInit creates bancor
*/
func (a *Client) BancorInit(params *BancorInitParams) (*BancorInitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBancorInitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bancorInit",
		Method:             "POST",
		PathPattern:        "/bancorlite/bancor-init",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BancorInitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BancorInitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bancorInit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BancorTrade trades with bancor
*/
func (a *Client) BancorTrade(params *BancorTradeParams) (*BancorTradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBancorTradeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bancorTrade",
		Method:             "POST",
		PathPattern:        "/bancorlite/bancor-trade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BancorTradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BancorTradeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bancorTrade: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBancorInfo gets the bancor pool info
*/
func (a *Client) GetBancorInfo(params *GetBancorInfoParams) (*GetBancorInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBancorInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBancorInfo",
		Method:             "GET",
		PathPattern:        "/bancorlite/pools/{symbol}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBancorInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBancorInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBancorInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBancorInfos gets all bancor infos
*/
func (a *Client) GetBancorInfos(params *GetBancorInfosParams) (*GetBancorInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBancorInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBancorInfos",
		Method:             "GET",
		PathPattern:        "/bancorlite/infos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBancorInfosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBancorInfosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBancorInfos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBancorliteParams gets the current bancorlite parameters
*/
func (a *Client) GetBancorliteParams(params *GetBancorliteParamsParams) (*GetBancorliteParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBancorliteParamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBancorliteParams",
		Method:             "GET",
		PathPattern:        "/bancorlite/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBancorliteParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBancorliteParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBancorliteParams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
