// Code generated by go-swagger; DO NOT EDIT.

package bancorlite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewBancorTradeParams creates a new BancorTradeParams object
// with the default values initialized.
func NewBancorTradeParams() *BancorTradeParams {
	var ()
	return &BancorTradeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewBancorTradeParamsWithTimeout creates a new BancorTradeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBancorTradeParamsWithTimeout(timeout time.Duration) *BancorTradeParams {
	var ()
	return &BancorTradeParams{

		timeout: timeout,
	}
}

// NewBancorTradeParamsWithContext creates a new BancorTradeParams object
// with the default values initialized, and the ability to set a context for a request
func NewBancorTradeParamsWithContext(ctx context.Context) *BancorTradeParams {
	var ()
	return &BancorTradeParams{

		Context: ctx,
	}
}

// NewBancorTradeParamsWithHTTPClient creates a new BancorTradeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewBancorTradeParamsWithHTTPClient(client *http.Client) *BancorTradeParams {
	var ()
	return &BancorTradeParams{
		HTTPClient: client,
	}
}

/*BancorTradeParams contains all the parameters to send to the API endpoint
for the bancor trade operation typically these are written to a http.Request
*/
type BancorTradeParams struct {

	/*BancorTrade
	  trade with bancor

	*/
	BancorTrade BancorTradeBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the bancor trade params
func (o *BancorTradeParams) WithTimeout(timeout time.Duration) *BancorTradeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the bancor trade params
func (o *BancorTradeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the bancor trade params
func (o *BancorTradeParams) WithContext(ctx context.Context) *BancorTradeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the bancor trade params
func (o *BancorTradeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the bancor trade params
func (o *BancorTradeParams) WithHTTPClient(client *http.Client) *BancorTradeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the bancor trade params
func (o *BancorTradeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBancorTrade adds the bancorTrade to the bancor trade params
func (o *BancorTradeParams) WithBancorTrade(bancorTrade BancorTradeBody) *BancorTradeParams {
	o.SetBancorTrade(bancorTrade)
	return o
}

// SetBancorTrade adds the bancorTrade to the bancor trade params
func (o *BancorTradeParams) SetBancorTrade(bancorTrade BancorTradeBody) {
	o.BancorTrade = bancorTrade
}

// WriteToRequest writes these params to a swagger request
func (o *BancorTradeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.BancorTrade); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
