// Code generated by go-swagger; DO NOT EDIT.

package bancorlite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/coinexchain/dex-api-go/models"
)

// BancorCancelReader is a Reader for the BancorCancel structure.
type BancorCancelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BancorCancelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBancorCancelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBancorCancelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBancorCancelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBancorCancelOK creates a BancorCancelOK with default headers values
func NewBancorCancelOK() *BancorCancelOK {
	return &BancorCancelOK{}
}

/*BancorCancelOK handles this case with default header values.

Tx was succesfully generated
*/
type BancorCancelOK struct {
	Payload *models.StdTx
}

func (o *BancorCancelOK) Error() string {
	return fmt.Sprintf("[POST /bancorlite/bancor-cancel][%d] bancorCancelOK  %+v", 200, o.Payload)
}

func (o *BancorCancelOK) GetPayload() *models.StdTx {
	return o.Payload
}

func (o *BancorCancelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StdTx)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBancorCancelBadRequest creates a BancorCancelBadRequest with default headers values
func NewBancorCancelBadRequest() *BancorCancelBadRequest {
	return &BancorCancelBadRequest{}
}

/*BancorCancelBadRequest handles this case with default header values.

Invalid request
*/
type BancorCancelBadRequest struct {
}

func (o *BancorCancelBadRequest) Error() string {
	return fmt.Sprintf("[POST /bancorlite/bancor-cancel][%d] bancorCancelBadRequest ", 400)
}

func (o *BancorCancelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBancorCancelInternalServerError creates a BancorCancelInternalServerError with default headers values
func NewBancorCancelInternalServerError() *BancorCancelInternalServerError {
	return &BancorCancelInternalServerError{}
}

/*BancorCancelInternalServerError handles this case with default header values.

Server internal error
*/
type BancorCancelInternalServerError struct {
}

func (o *BancorCancelInternalServerError) Error() string {
	return fmt.Sprintf("[POST /bancorlite/bancor-cancel][%d] bancorCancelInternalServerError ", 500)
}

func (o *BancorCancelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*BancorCancelBody bancor cancel body
swagger:model BancorCancelBody
*/
type BancorCancelBody struct {

	// base req
	// Required: true
	BaseReq *models.BaseReq `json:"base_req"`

	// money
	// Required: true
	Money *string `json:"money"`

	// stock
	// Required: true
	Stock *string `json:"stock"`
}

// Validate validates this bancor cancel body
func (o *BancorCancelBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BancorCancelBody) validateBaseReq(formats strfmt.Registry) error {

	if err := validate.Required("bancorCancel"+"."+"base_req", "body", o.BaseReq); err != nil {
		return err
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bancorCancel" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

func (o *BancorCancelBody) validateMoney(formats strfmt.Registry) error {

	if err := validate.Required("bancorCancel"+"."+"money", "body", o.Money); err != nil {
		return err
	}

	return nil
}

func (o *BancorCancelBody) validateStock(formats strfmt.Registry) error {

	if err := validate.Required("bancorCancel"+"."+"stock", "body", o.Stock); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *BancorCancelBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BancorCancelBody) UnmarshalBinary(b []byte) error {
	var res BancorCancelBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
