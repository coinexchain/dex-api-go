// Code generated by go-swagger; DO NOT EDIT.

package bancorlite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/coinexchain/dex-api-go/models"
)

// BancorTradeReader is a Reader for the BancorTrade structure.
type BancorTradeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BancorTradeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBancorTradeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBancorTradeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBancorTradeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBancorTradeOK creates a BancorTradeOK with default headers values
func NewBancorTradeOK() *BancorTradeOK {
	return &BancorTradeOK{}
}

/*BancorTradeOK handles this case with default header values.

Tx was succesfully generated
*/
type BancorTradeOK struct {
	Payload *models.StdTx
}

func (o *BancorTradeOK) Error() string {
	return fmt.Sprintf("[POST /bancorlite/bancor-trade][%d] bancorTradeOK  %+v", 200, o.Payload)
}

func (o *BancorTradeOK) GetPayload() *models.StdTx {
	return o.Payload
}

func (o *BancorTradeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StdTx)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBancorTradeBadRequest creates a BancorTradeBadRequest with default headers values
func NewBancorTradeBadRequest() *BancorTradeBadRequest {
	return &BancorTradeBadRequest{}
}

/*BancorTradeBadRequest handles this case with default header values.

Invalid request
*/
type BancorTradeBadRequest struct {
}

func (o *BancorTradeBadRequest) Error() string {
	return fmt.Sprintf("[POST /bancorlite/bancor-trade][%d] bancorTradeBadRequest ", 400)
}

func (o *BancorTradeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBancorTradeInternalServerError creates a BancorTradeInternalServerError with default headers values
func NewBancorTradeInternalServerError() *BancorTradeInternalServerError {
	return &BancorTradeInternalServerError{}
}

/*BancorTradeInternalServerError handles this case with default header values.

Server internal error
*/
type BancorTradeInternalServerError struct {
}

func (o *BancorTradeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /bancorlite/bancor-trade][%d] bancorTradeInternalServerError ", 500)
}

func (o *BancorTradeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*BancorTradeBody bancor trade body
swagger:model BancorTradeBody
*/
type BancorTradeBody struct {

	// amount
	// Required: true
	Amount *string `json:"amount"`

	// base req
	// Required: true
	BaseReq *models.BaseReq `json:"base_req"`

	// is buy
	// Required: true
	IsBuy *bool `json:"is_buy"`

	// money
	// Required: true
	Money *string `json:"money"`

	// money limit
	// Required: true
	MoneyLimit *string `json:"money_limit"`

	// stock
	// Required: true
	Stock *string `json:"stock"`
}

// Validate validates this bancor trade body
func (o *BancorTradeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIsBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMoneyLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BancorTradeBody) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("bancorTrade"+"."+"amount", "body", o.Amount); err != nil {
		return err
	}

	return nil
}

func (o *BancorTradeBody) validateBaseReq(formats strfmt.Registry) error {

	if err := validate.Required("bancorTrade"+"."+"base_req", "body", o.BaseReq); err != nil {
		return err
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bancorTrade" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

func (o *BancorTradeBody) validateIsBuy(formats strfmt.Registry) error {

	if err := validate.Required("bancorTrade"+"."+"is_buy", "body", o.IsBuy); err != nil {
		return err
	}

	return nil
}

func (o *BancorTradeBody) validateMoney(formats strfmt.Registry) error {

	if err := validate.Required("bancorTrade"+"."+"money", "body", o.Money); err != nil {
		return err
	}

	return nil
}

func (o *BancorTradeBody) validateMoneyLimit(formats strfmt.Registry) error {

	if err := validate.Required("bancorTrade"+"."+"money_limit", "body", o.MoneyLimit); err != nil {
		return err
	}

	return nil
}

func (o *BancorTradeBody) validateStock(formats strfmt.Registry) error {

	if err := validate.Required("bancorTrade"+"."+"stock", "body", o.Stock); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *BancorTradeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BancorTradeBody) UnmarshalBinary(b []byte) error {
	var res BancorTradeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
