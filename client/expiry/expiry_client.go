// Code generated by go-swagger; DO NOT EDIT.

package expiry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new expiry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for expiry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	QueryRedelegation(params *QueryRedelegationParams) (*QueryRedelegationOK, error)

	QueryUnbonding(params *QueryUnbondingParams) (*QueryUnbondingOK, error)

	QueryUnlock(params *QueryUnlockParams) (*QueryUnlockOK, error)

	Querylocked(params *QuerylockedParams) (*QuerylockedOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  QueryRedelegation queries redelegation

  Query delegator's redelegation-completion info
*/
func (a *Client) QueryRedelegation(params *QueryRedelegationParams) (*QueryRedelegationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryRedelegationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queryRedelegation",
		Method:             "GET",
		PathPattern:        "/expiry/redelegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueryRedelegationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryRedelegationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryRedelegation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryUnbonding queries unbonding

  Query delegator's unbonding-completion info
*/
func (a *Client) QueryUnbonding(params *QueryUnbondingParams) (*QueryUnbondingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryUnbondingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queryUnbonding",
		Method:             "GET",
		PathPattern:        "/expiry/unbondings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueryUnbondingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryUnbondingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryUnbonding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryUnlock queries unlock

  Query Unlock info
*/
func (a *Client) QueryUnlock(params *QueryUnlockParams) (*QueryUnlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryUnlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queryUnlock",
		Method:             "GET",
		PathPattern:        "/expiry/unlocks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueryUnlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryUnlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryUnlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Querylocked queries lock tx

  Query lock transfer info
*/
func (a *Client) Querylocked(params *QuerylockedParams) (*QuerylockedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuerylockedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "querylocked",
		Method:             "GET",
		PathPattern:        "/expiry/lockeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QuerylockedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QuerylockedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for querylocked: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
