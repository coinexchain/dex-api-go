// Code generated by go-swagger; DO NOT EDIT.

package comment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/coinexchain/dex-api-go/models"
)

// FollowupCommentReader is a Reader for the FollowupComment structure.
type FollowupCommentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FollowupCommentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFollowupCommentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFollowupCommentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFollowupCommentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewFollowupCommentOK creates a FollowupCommentOK with default headers values
func NewFollowupCommentOK() *FollowupCommentOK {
	return &FollowupCommentOK{}
}

/*FollowupCommentOK handles this case with default header values.

Tx was succesfully generated
*/
type FollowupCommentOK struct {
	Payload *models.StdTx
}

func (o *FollowupCommentOK) Error() string {
	return fmt.Sprintf("[POST /comment/followup-comment][%d] followupCommentOK  %+v", 200, o.Payload)
}

func (o *FollowupCommentOK) GetPayload() *models.StdTx {
	return o.Payload
}

func (o *FollowupCommentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StdTx)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFollowupCommentBadRequest creates a FollowupCommentBadRequest with default headers values
func NewFollowupCommentBadRequest() *FollowupCommentBadRequest {
	return &FollowupCommentBadRequest{}
}

/*FollowupCommentBadRequest handles this case with default header values.

Invalid request
*/
type FollowupCommentBadRequest struct {
}

func (o *FollowupCommentBadRequest) Error() string {
	return fmt.Sprintf("[POST /comment/followup-comment][%d] followupCommentBadRequest ", 400)
}

func (o *FollowupCommentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFollowupCommentInternalServerError creates a FollowupCommentInternalServerError with default headers values
func NewFollowupCommentInternalServerError() *FollowupCommentInternalServerError {
	return &FollowupCommentInternalServerError{}
}

/*FollowupCommentInternalServerError handles this case with default header values.

Server internal error
*/
type FollowupCommentInternalServerError struct {
}

func (o *FollowupCommentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /comment/followup-comment][%d] followupCommentInternalServerError ", 500)
}

func (o *FollowupCommentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*FollowupCommentBody followup comment body
swagger:model FollowupCommentBody
*/
type FollowupCommentBody struct {

	// attitudes
	Attitudes []int64 `json:"attitudes"`

	// base req
	BaseReq *models.BaseReq `json:"base_req,omitempty"`

	// content
	Content string `json:"content,omitempty"`

	// content type
	ContentType int64 `json:"content_type,omitempty"`

	// donation
	Donation string `json:"donation,omitempty"`

	// id rewarded
	IDRewarded string `json:"id_rewarded,omitempty"`

	// reward amount
	RewardAmount string `json:"reward_amount,omitempty"`

	// reward target
	RewardTarget string `json:"reward_target,omitempty"`

	// reward token
	RewardToken string `json:"reward_token,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this followup comment body
func (o *FollowupCommentBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FollowupCommentBody) validateBaseReq(formats strfmt.Registry) error {

	if swag.IsZero(o.BaseReq) { // not required
		return nil
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("followupCommentReq" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *FollowupCommentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FollowupCommentBody) UnmarshalBinary(b []byte) error {
	var res FollowupCommentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
