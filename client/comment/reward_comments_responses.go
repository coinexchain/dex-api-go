// Code generated by go-swagger; DO NOT EDIT.

package comment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/coinexchain/dex-api-go/models"
)

// RewardCommentsReader is a Reader for the RewardComments structure.
type RewardCommentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RewardCommentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRewardCommentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRewardCommentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRewardCommentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRewardCommentsOK creates a RewardCommentsOK with default headers values
func NewRewardCommentsOK() *RewardCommentsOK {
	return &RewardCommentsOK{}
}

/*RewardCommentsOK handles this case with default header values.

Tx was succesfully generated
*/
type RewardCommentsOK struct {
	Payload *models.StdTx
}

func (o *RewardCommentsOK) Error() string {
	return fmt.Sprintf("[POST /comment/reward-comments][%d] rewardCommentsOK  %+v", 200, o.Payload)
}

func (o *RewardCommentsOK) GetPayload() *models.StdTx {
	return o.Payload
}

func (o *RewardCommentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StdTx)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRewardCommentsBadRequest creates a RewardCommentsBadRequest with default headers values
func NewRewardCommentsBadRequest() *RewardCommentsBadRequest {
	return &RewardCommentsBadRequest{}
}

/*RewardCommentsBadRequest handles this case with default header values.

Invalid request
*/
type RewardCommentsBadRequest struct {
}

func (o *RewardCommentsBadRequest) Error() string {
	return fmt.Sprintf("[POST /comment/reward-comments][%d] rewardCommentsBadRequest ", 400)
}

func (o *RewardCommentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRewardCommentsInternalServerError creates a RewardCommentsInternalServerError with default headers values
func NewRewardCommentsInternalServerError() *RewardCommentsInternalServerError {
	return &RewardCommentsInternalServerError{}
}

/*RewardCommentsInternalServerError handles this case with default header values.

Server internal error
*/
type RewardCommentsInternalServerError struct {
}

func (o *RewardCommentsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /comment/reward-comments][%d] rewardCommentsInternalServerError ", 500)
}

func (o *RewardCommentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*RewardCommentsBody reward comments body
swagger:model RewardCommentsBody
*/
type RewardCommentsBody struct {

	// base req
	BaseReq *models.BaseReq `json:"base_req,omitempty"`

	// references
	References []*models.CommentRef `json:"references"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this reward comments body
func (o *RewardCommentsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RewardCommentsBody) validateBaseReq(formats strfmt.Registry) error {

	if swag.IsZero(o.BaseReq) { // not required
		return nil
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rewardCommentsReq" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

func (o *RewardCommentsBody) validateReferences(formats strfmt.Registry) error {

	if swag.IsZero(o.References) { // not required
		return nil
	}

	for i := 0; i < len(o.References); i++ {
		if swag.IsZero(o.References[i]) { // not required
			continue
		}

		if o.References[i] != nil {
			if err := o.References[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewardCommentsReq" + "." + "references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RewardCommentsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RewardCommentsBody) UnmarshalBinary(b []byte) error {
	var res RewardCommentsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
