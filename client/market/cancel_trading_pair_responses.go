// Code generated by go-swagger; DO NOT EDIT.

package market

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/coinexchain/dex-api-go/models"
)

// CancelTradingPairReader is a Reader for the CancelTradingPair structure.
type CancelTradingPairReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelTradingPairReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelTradingPairOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelTradingPairBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelTradingPairInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCancelTradingPairOK creates a CancelTradingPairOK with default headers values
func NewCancelTradingPairOK() *CancelTradingPairOK {
	return &CancelTradingPairOK{}
}

/*CancelTradingPairOK handles this case with default header values.

Tx was succesfully generated
*/
type CancelTradingPairOK struct {
	Payload *models.StdTx
}

func (o *CancelTradingPairOK) Error() string {
	return fmt.Sprintf("[POST /market/cancel-trading-pair][%d] cancelTradingPairOK  %+v", 200, o.Payload)
}

func (o *CancelTradingPairOK) GetPayload() *models.StdTx {
	return o.Payload
}

func (o *CancelTradingPairOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StdTx)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelTradingPairBadRequest creates a CancelTradingPairBadRequest with default headers values
func NewCancelTradingPairBadRequest() *CancelTradingPairBadRequest {
	return &CancelTradingPairBadRequest{}
}

/*CancelTradingPairBadRequest handles this case with default header values.

Invalid request
*/
type CancelTradingPairBadRequest struct {
}

func (o *CancelTradingPairBadRequest) Error() string {
	return fmt.Sprintf("[POST /market/cancel-trading-pair][%d] cancelTradingPairBadRequest ", 400)
}

func (o *CancelTradingPairBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelTradingPairInternalServerError creates a CancelTradingPairInternalServerError with default headers values
func NewCancelTradingPairInternalServerError() *CancelTradingPairInternalServerError {
	return &CancelTradingPairInternalServerError{}
}

/*CancelTradingPairInternalServerError handles this case with default header values.

Server internal error
*/
type CancelTradingPairInternalServerError struct {
}

func (o *CancelTradingPairInternalServerError) Error() string {
	return fmt.Sprintf("[POST /market/cancel-trading-pair][%d] cancelTradingPairInternalServerError ", 500)
}

func (o *CancelTradingPairInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*CancelTradingPairBody cancel trading pair body
swagger:model CancelTradingPairBody
*/
type CancelTradingPairBody struct {

	// base req
	// Required: true
	BaseReq *models.BaseReq `json:"base_req"`

	// time
	// Required: true
	Time *string `json:"time"`

	// trading pair
	// Required: true
	TradingPair *string `json:"trading_pair"`
}

// Validate validates this cancel trading pair body
func (o *CancelTradingPairBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTradingPair(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CancelTradingPairBody) validateBaseReq(formats strfmt.Registry) error {

	if err := validate.Required("info"+"."+"base_req", "body", o.BaseReq); err != nil {
		return err
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("info" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

func (o *CancelTradingPairBody) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("info"+"."+"time", "body", o.Time); err != nil {
		return err
	}

	return nil
}

func (o *CancelTradingPairBody) validateTradingPair(formats strfmt.Registry) error {

	if err := validate.Required("info"+"."+"trading_pair", "body", o.TradingPair); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CancelTradingPairBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CancelTradingPairBody) UnmarshalBinary(b []byte) error {
	var res CancelTradingPairBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
