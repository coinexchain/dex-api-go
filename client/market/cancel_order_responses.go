// Code generated by go-swagger; DO NOT EDIT.

package market

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/coinexchain/dex-api-go/models"
)

// CancelOrderReader is a Reader for the CancelOrder structure.
type CancelOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelOrderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCancelOrderOK creates a CancelOrderOK with default headers values
func NewCancelOrderOK() *CancelOrderOK {
	return &CancelOrderOK{}
}

/*CancelOrderOK handles this case with default header values.

Tx was succesfully generated
*/
type CancelOrderOK struct {
	Payload *models.StdTx
}

func (o *CancelOrderOK) Error() string {
	return fmt.Sprintf("[POST /market/cancel-order][%d] cancelOrderOK  %+v", 200, o.Payload)
}

func (o *CancelOrderOK) GetPayload() *models.StdTx {
	return o.Payload
}

func (o *CancelOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StdTx)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelOrderBadRequest creates a CancelOrderBadRequest with default headers values
func NewCancelOrderBadRequest() *CancelOrderBadRequest {
	return &CancelOrderBadRequest{}
}

/*CancelOrderBadRequest handles this case with default header values.

Invalid request
*/
type CancelOrderBadRequest struct {
}

func (o *CancelOrderBadRequest) Error() string {
	return fmt.Sprintf("[POST /market/cancel-order][%d] cancelOrderBadRequest ", 400)
}

func (o *CancelOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelOrderInternalServerError creates a CancelOrderInternalServerError with default headers values
func NewCancelOrderInternalServerError() *CancelOrderInternalServerError {
	return &CancelOrderInternalServerError{}
}

/*CancelOrderInternalServerError handles this case with default header values.

Server internal error
*/
type CancelOrderInternalServerError struct {
}

func (o *CancelOrderInternalServerError) Error() string {
	return fmt.Sprintf("[POST /market/cancel-order][%d] cancelOrderInternalServerError ", 500)
}

func (o *CancelOrderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*CancelOrderBody cancel order body
swagger:model CancelOrderBody
*/
type CancelOrderBody struct {

	// base req
	// Required: true
	BaseReq *models.BaseReq `json:"base_req"`

	// order id
	// Required: true
	OrderID *string `json:"order_id"`
}

// Validate validates this cancel order body
func (o *CancelOrderBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CancelOrderBody) validateBaseReq(formats strfmt.Registry) error {

	if err := validate.Required("orderInfo"+"."+"base_req", "body", o.BaseReq); err != nil {
		return err
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInfo" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

func (o *CancelOrderBody) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("orderInfo"+"."+"order_id", "body", o.OrderID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CancelOrderBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CancelOrderBody) UnmarshalBinary(b []byte) error {
	var res CancelOrderBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
