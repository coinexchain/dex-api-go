// Code generated by go-swagger; DO NOT EDIT.

package market

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetOrdersInMarketParams creates a new GetOrdersInMarketParams object
// with the default values initialized.
func NewGetOrdersInMarketParams() *GetOrdersInMarketParams {
	var ()
	return &GetOrdersInMarketParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrdersInMarketParamsWithTimeout creates a new GetOrdersInMarketParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOrdersInMarketParamsWithTimeout(timeout time.Duration) *GetOrdersInMarketParams {
	var ()
	return &GetOrdersInMarketParams{

		timeout: timeout,
	}
}

// NewGetOrdersInMarketParamsWithContext creates a new GetOrdersInMarketParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOrdersInMarketParamsWithContext(ctx context.Context) *GetOrdersInMarketParams {
	var ()
	return &GetOrdersInMarketParams{

		Context: ctx,
	}
}

// NewGetOrdersInMarketParamsWithHTTPClient creates a new GetOrdersInMarketParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOrdersInMarketParamsWithHTTPClient(client *http.Client) *GetOrdersInMarketParams {
	var ()
	return &GetOrdersInMarketParams{
		HTTPClient: client,
	}
}

/*GetOrdersInMarketParams contains all the parameters to send to the API endpoint
for the get orders in market operation typically these are written to a http.Request
*/
type GetOrdersInMarketParams struct {

	/*Money
	  money symbol

	*/
	Money string
	/*Stock
	  stock symbol

	*/
	Stock string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get orders in market params
func (o *GetOrdersInMarketParams) WithTimeout(timeout time.Duration) *GetOrdersInMarketParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get orders in market params
func (o *GetOrdersInMarketParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get orders in market params
func (o *GetOrdersInMarketParams) WithContext(ctx context.Context) *GetOrdersInMarketParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get orders in market params
func (o *GetOrdersInMarketParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get orders in market params
func (o *GetOrdersInMarketParams) WithHTTPClient(client *http.Client) *GetOrdersInMarketParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get orders in market params
func (o *GetOrdersInMarketParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMoney adds the money to the get orders in market params
func (o *GetOrdersInMarketParams) WithMoney(money string) *GetOrdersInMarketParams {
	o.SetMoney(money)
	return o
}

// SetMoney adds the money to the get orders in market params
func (o *GetOrdersInMarketParams) SetMoney(money string) {
	o.Money = money
}

// WithStock adds the stock to the get orders in market params
func (o *GetOrdersInMarketParams) WithStock(stock string) *GetOrdersInMarketParams {
	o.SetStock(stock)
	return o
}

// SetStock adds the stock to the get orders in market params
func (o *GetOrdersInMarketParams) SetStock(stock string) {
	o.Stock = stock
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrdersInMarketParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param money
	if err := r.SetPathParam("money", o.Money); err != nil {
		return err
	}

	// path param stock
	if err := r.SetPathParam("stock", o.Stock); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
