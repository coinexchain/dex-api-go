// Code generated by go-swagger; DO NOT EDIT.

package market

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new market API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for market API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CancelOrder(params *CancelOrderParams) (*CancelOrderOK, error)

	CancelTradingPair(params *CancelTradingPairParams) (*CancelTradingPairOK, error)

	CreateGteOrder(params *CreateGteOrderParams) (*CreateGteOrderOK, error)

	CreateIocOrder(params *CreateIocOrderParams) (*CreateIocOrderOK, error)

	CreateTradingPair(params *CreateTradingPairParams) (*CreateTradingPairOK, error)

	GetMarketParams(params *GetMarketParamsParams) (*GetMarketParamsOK, error)

	GetOrder(params *GetOrderParams) (*GetOrderOK, error)

	GetOrders(params *GetOrdersParams) (*GetOrdersOK, error)

	GetOrdersInMarket(params *GetOrdersInMarketParams) (*GetOrdersInMarketOK, error)

	GetTradingPair(params *GetTradingPairParams) (*GetTradingPairOK, error)

	ModifyPricePrecision(params *ModifyPricePrecisionParams) (*ModifyPricePrecisionOK, error)

	QueryCandleStick(params *QueryCandleStickParams) (*QueryCandleStickOK, error)

	QueryDeal(params *QueryDealParams) (*QueryDealOK, error)

	QueryDepth(params *QueryDepthParams) (*QueryDepthOK, error)

	QueryOrder(params *QueryOrderParams) (*QueryOrderOK, error)

	QueryTickers(params *QueryTickersParams) (*QueryTickersOK, error)

	QueryTradingPairs(params *QueryTradingPairsParams) (*QueryTradingPairsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelOrder cancels the order
*/
func (a *Client) CancelOrder(params *CancelOrderParams) (*CancelOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelOrder",
		Method:             "POST",
		PathPattern:        "/market/cancel-order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CancelOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CancelTradingPair cancels the trading pair
*/
func (a *Client) CancelTradingPair(params *CancelTradingPairParams) (*CancelTradingPairOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelTradingPairParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelTradingPair",
		Method:             "POST",
		PathPattern:        "/market/cancel-trading-pair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CancelTradingPairReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelTradingPairOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelTradingPair: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateGteOrder creates g t e order in blockchain
*/
func (a *Client) CreateGteOrder(params *CreateGteOrderParams) (*CreateGteOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGteOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createGteOrder",
		Method:             "POST",
		PathPattern:        "/market/gte-orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateGteOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGteOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGteOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateIocOrder creates i o c order in blockchain
*/
func (a *Client) CreateIocOrder(params *CreateIocOrderParams) (*CreateIocOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIocOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createIocOrder",
		Method:             "POST",
		PathPattern:        "/market/ioc-orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateIocOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIocOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createIocOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTradingPair creates trading pair in blockchain
*/
func (a *Client) CreateTradingPair(params *CreateTradingPairParams) (*CreateTradingPairOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTradingPairParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTradingPair",
		Method:             "POST",
		PathPattern:        "/market/trading-pairs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTradingPairReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTradingPairOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTradingPair: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMarketParams gets the current market parameters
*/
func (a *Client) GetMarketParams(params *GetMarketParamsParams) (*GetMarketParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMarketParamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMarketParams",
		Method:             "GET",
		PathPattern:        "/market/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMarketParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMarketParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMarketParams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrder queries order info
*/
func (a *Client) GetOrder(params *GetOrderParams) (*GetOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrder",
		Method:             "GET",
		PathPattern:        "/market/orders/{order-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrders queries user order id list
*/
func (a *Client) GetOrders(params *GetOrdersParams) (*GetOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrders",
		Method:             "GET",
		PathPattern:        "/market/orders/account/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrdersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrdersInMarket queries trading pair s orderbook
*/
func (a *Client) GetOrdersInMarket(params *GetOrdersInMarketParams) (*GetOrdersInMarketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrdersInMarketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrdersInMarket",
		Method:             "GET",
		PathPattern:        "/market/orderbook/{stock}/{money}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrdersInMarketReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrdersInMarketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrdersInMarket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTradingPair queries trading pair info
*/
func (a *Client) GetTradingPair(params *GetTradingPairParams) (*GetTradingPairOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTradingPairParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTradingPair",
		Method:             "GET",
		PathPattern:        "/market/trading-pairs/{stock}/{money}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTradingPairReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTradingPairOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTradingPair: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ModifyPricePrecision modifies the price precision of the trading pair in the dex
*/
func (a *Client) ModifyPricePrecision(params *ModifyPricePrecisionParams) (*ModifyPricePrecisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyPricePrecisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyPricePrecision",
		Method:             "POST",
		PathPattern:        "/market/price-precision",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyPricePrecisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyPricePrecisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyPricePrecision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryCandleStick queries market candle stick

  Query candleStick until to given time
*/
func (a *Client) QueryCandleStick(params *QueryCandleStickParams) (*QueryCandleStickOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryCandleStickParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queryCandleStick",
		Method:             "GET",
		PathPattern:        "/market/candle-sticks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueryCandleStickReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryCandleStickOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryCandleStick: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryDeal queries market deal

  Query market deal until to given time
*/
func (a *Client) QueryDeal(params *QueryDealParams) (*QueryDealOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryDealParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queryDeal",
		Method:             "GET",
		PathPattern:        "/market/deals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueryDealReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryDealOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryDeal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryDepth queries market depth

  Query purchases and sales of a market at all price levels
*/
func (a *Client) QueryDepth(params *QueryDepthParams) (*QueryDepthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryDepthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queryDepth",
		Method:             "GET",
		PathPattern:        "/market/depths",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueryDepthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryDepthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryDepth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryOrder queries account s order

  Query account's order activities in all markets until to given time
*/
func (a *Client) QueryOrder(params *QueryOrderParams) (*QueryOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queryOrder",
		Method:             "GET",
		PathPattern:        "/market/user-orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueryOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryTickers queries market tickers

  Query tickers info
*/
func (a *Client) QueryTickers(params *QueryTickersParams) (*QueryTickersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryTickersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queryTickers",
		Method:             "GET",
		PathPattern:        "/market/tickers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueryTickersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryTickersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryTickers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryTradingPairs queries all trading pair infos in blockchain
*/
func (a *Client) QueryTradingPairs(params *QueryTradingPairsParams) (*QueryTradingPairsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryTradingPairsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queryTradingPairs",
		Method:             "GET",
		PathPattern:        "/market/exist-trading-pairs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueryTradingPairsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryTradingPairsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryTradingPairs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
