// Code generated by go-swagger; DO NOT EDIT.

package market

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryDepthParams creates a new QueryDepthParams object
// with the default values initialized.
func NewQueryDepthParams() *QueryDepthParams {
	var ()
	return &QueryDepthParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryDepthParamsWithTimeout creates a new QueryDepthParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryDepthParamsWithTimeout(timeout time.Duration) *QueryDepthParams {
	var ()
	return &QueryDepthParams{

		timeout: timeout,
	}
}

// NewQueryDepthParamsWithContext creates a new QueryDepthParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryDepthParamsWithContext(ctx context.Context) *QueryDepthParams {
	var ()
	return &QueryDepthParams{

		Context: ctx,
	}
}

// NewQueryDepthParamsWithHTTPClient creates a new QueryDepthParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryDepthParamsWithHTTPClient(client *http.Client) *QueryDepthParams {
	var ()
	return &QueryDepthParams{
		HTTPClient: client,
	}
}

/*QueryDepthParams contains all the parameters to send to the API endpoint
for the query depth operation typically these are written to a http.Request
*/
type QueryDepthParams struct {

	/*Count
	  Querier count limited to 1024

	*/
	Count int32
	/*Market
	  stock/money

	*/
	Market string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query depth params
func (o *QueryDepthParams) WithTimeout(timeout time.Duration) *QueryDepthParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query depth params
func (o *QueryDepthParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query depth params
func (o *QueryDepthParams) WithContext(ctx context.Context) *QueryDepthParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query depth params
func (o *QueryDepthParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query depth params
func (o *QueryDepthParams) WithHTTPClient(client *http.Client) *QueryDepthParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query depth params
func (o *QueryDepthParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the query depth params
func (o *QueryDepthParams) WithCount(count int32) *QueryDepthParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the query depth params
func (o *QueryDepthParams) SetCount(count int32) {
	o.Count = count
}

// WithMarket adds the market to the query depth params
func (o *QueryDepthParams) WithMarket(market string) *QueryDepthParams {
	o.SetMarket(market)
	return o
}

// SetMarket adds the market to the query depth params
func (o *QueryDepthParams) SetMarket(market string) {
	o.Market = market
}

// WriteToRequest writes these params to a swagger request
func (o *QueryDepthParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param count
	qrCount := o.Count
	qCount := swag.FormatInt32(qrCount)
	if qCount != "" {
		if err := r.SetQueryParam("count", qCount); err != nil {
			return err
		}
	}

	// query param market
	qrMarket := o.Market
	qMarket := qrMarket
	if qMarket != "" {
		if err := r.SetQueryParam("market", qMarket); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
