// Code generated by go-swagger; DO NOT EDIT.

package alias

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/coinexchain/dex-api-go/models"
)

// UpdateAliasReader is a Reader for the UpdateAlias structure.
type UpdateAliasReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAliasReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAliasOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAliasBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAliasInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAliasOK creates a UpdateAliasOK with default headers values
func NewUpdateAliasOK() *UpdateAliasOK {
	return &UpdateAliasOK{}
}

/*UpdateAliasOK handles this case with default header values.

Tx was succesfully generated
*/
type UpdateAliasOK struct {
	Payload *models.StdTx
}

func (o *UpdateAliasOK) Error() string {
	return fmt.Sprintf("[POST /alias/update][%d] updateAliasOK  %+v", 200, o.Payload)
}

func (o *UpdateAliasOK) GetPayload() *models.StdTx {
	return o.Payload
}

func (o *UpdateAliasOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StdTx)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAliasBadRequest creates a UpdateAliasBadRequest with default headers values
func NewUpdateAliasBadRequest() *UpdateAliasBadRequest {
	return &UpdateAliasBadRequest{}
}

/*UpdateAliasBadRequest handles this case with default header values.

Invalid request
*/
type UpdateAliasBadRequest struct {
}

func (o *UpdateAliasBadRequest) Error() string {
	return fmt.Sprintf("[POST /alias/update][%d] updateAliasBadRequest ", 400)
}

func (o *UpdateAliasBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAliasInternalServerError creates a UpdateAliasInternalServerError with default headers values
func NewUpdateAliasInternalServerError() *UpdateAliasInternalServerError {
	return &UpdateAliasInternalServerError{}
}

/*UpdateAliasInternalServerError handles this case with default header values.

Server internal error
*/
type UpdateAliasInternalServerError struct {
}

func (o *UpdateAliasInternalServerError) Error() string {
	return fmt.Sprintf("[POST /alias/update][%d] updateAliasInternalServerError ", 500)
}

func (o *UpdateAliasInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*UpdateAliasBody update alias body
swagger:model UpdateAliasBody
*/
type UpdateAliasBody struct {

	// alias
	Alias string `json:"alias,omitempty"`

	// as default
	AsDefault bool `json:"as_default,omitempty"`

	// base req
	BaseReq *models.BaseReq `json:"base_req,omitempty"`

	// is add
	IsAdd bool `json:"is_add,omitempty"`
}

// Validate validates this update alias body
func (o *UpdateAliasBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAliasBody) validateBaseReq(formats strfmt.Registry) error {

	if swag.IsZero(o.BaseReq) { // not required
		return nil
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aliasUpdateReq" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAliasBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAliasBody) UnmarshalBinary(b []byte) error {
	var res UpdateAliasBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
