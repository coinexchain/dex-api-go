// Code generated by go-swagger; DO NOT EDIT.

package alias

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateAliasParams creates a new UpdateAliasParams object
// with the default values initialized.
func NewUpdateAliasParams() *UpdateAliasParams {
	var ()
	return &UpdateAliasParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAliasParamsWithTimeout creates a new UpdateAliasParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateAliasParamsWithTimeout(timeout time.Duration) *UpdateAliasParams {
	var ()
	return &UpdateAliasParams{

		timeout: timeout,
	}
}

// NewUpdateAliasParamsWithContext creates a new UpdateAliasParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateAliasParamsWithContext(ctx context.Context) *UpdateAliasParams {
	var ()
	return &UpdateAliasParams{

		Context: ctx,
	}
}

// NewUpdateAliasParamsWithHTTPClient creates a new UpdateAliasParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateAliasParamsWithHTTPClient(client *http.Client) *UpdateAliasParams {
	var ()
	return &UpdateAliasParams{
		HTTPClient: client,
	}
}

/*UpdateAliasParams contains all the parameters to send to the API endpoint
for the update alias operation typically these are written to a http.Request
*/
type UpdateAliasParams struct {

	/*AliasUpdateReq
	  update an address's aliases

	*/
	AliasUpdateReq UpdateAliasBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update alias params
func (o *UpdateAliasParams) WithTimeout(timeout time.Duration) *UpdateAliasParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update alias params
func (o *UpdateAliasParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update alias params
func (o *UpdateAliasParams) WithContext(ctx context.Context) *UpdateAliasParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update alias params
func (o *UpdateAliasParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update alias params
func (o *UpdateAliasParams) WithHTTPClient(client *http.Client) *UpdateAliasParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update alias params
func (o *UpdateAliasParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAliasUpdateReq adds the aliasUpdateReq to the update alias params
func (o *UpdateAliasParams) WithAliasUpdateReq(aliasUpdateReq UpdateAliasBody) *UpdateAliasParams {
	o.SetAliasUpdateReq(aliasUpdateReq)
	return o
}

// SetAliasUpdateReq adds the aliasUpdateReq to the update alias params
func (o *UpdateAliasParams) SetAliasUpdateReq(aliasUpdateReq UpdateAliasBody) {
	o.AliasUpdateReq = aliasUpdateReq
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAliasParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.AliasUpdateReq); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
