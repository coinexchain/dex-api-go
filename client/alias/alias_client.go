// Code generated by go-swagger; DO NOT EDIT.

package alias

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new alias API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for alias API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAddressFromAlias(params *GetAddressFromAliasParams) (*GetAddressFromAliasOK, error)

	GetAliasParams(params *GetAliasParamsParams) (*GetAliasParamsOK, error)

	GetAliasesFromAddress(params *GetAliasesFromAddressParams) (*GetAliasesFromAddressOK, error)

	UpdateAlias(params *UpdateAliasParams) (*UpdateAliasOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAddressFromAlias givens an alias query the corresponding address
*/
func (a *Client) GetAddressFromAlias(params *GetAddressFromAliasParams) (*GetAddressFromAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAddressFromAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAddressFromAlias",
		Method:             "GET",
		PathPattern:        "/alias/address-of-alias/{alias}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAddressFromAliasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAddressFromAliasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAddressFromAlias: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAliasParams gets the current alias parameters
*/
func (a *Client) GetAliasParams(params *GetAliasParamsParams) (*GetAliasParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAliasParamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAliasParams",
		Method:             "GET",
		PathPattern:        "/alias/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAliasParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAliasParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAliasParams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAliasesFromAddress givens an account s address query all the corresponding aliases
*/
func (a *Client) GetAliasesFromAddress(params *GetAliasesFromAddressParams) (*GetAliasesFromAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAliasesFromAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAliasesFromAddress",
		Method:             "GET",
		PathPattern:        "/alias/aliases-of-address/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAliasesFromAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAliasesFromAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAliasesFromAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAlias adds or remove alias for an address
*/
func (a *Client) UpdateAlias(params *UpdateAliasParams) (*UpdateAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAlias",
		Method:             "POST",
		PathPattern:        "/alias/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateAliasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAliasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAlias: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
