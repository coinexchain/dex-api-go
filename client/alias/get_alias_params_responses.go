// Code generated by go-swagger; DO NOT EDIT.

package alias

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetAliasParamsReader is a Reader for the GetAliasParams structure.
type GetAliasParamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAliasParamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAliasParamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetAliasParamsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAliasParamsOK creates a GetAliasParamsOK with default headers values
func NewGetAliasParamsOK() *GetAliasParamsOK {
	return &GetAliasParamsOK{}
}

/*GetAliasParamsOK handles this case with default header values.

OK
*/
type GetAliasParamsOK struct {
	Payload *GetAliasParamsOKBody
}

func (o *GetAliasParamsOK) Error() string {
	return fmt.Sprintf("[GET /alias/parameters][%d] getAliasParamsOK  %+v", 200, o.Payload)
}

func (o *GetAliasParamsOK) GetPayload() *GetAliasParamsOKBody {
	return o.Payload
}

func (o *GetAliasParamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAliasParamsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAliasParamsInternalServerError creates a GetAliasParamsInternalServerError with default headers values
func NewGetAliasParamsInternalServerError() *GetAliasParamsInternalServerError {
	return &GetAliasParamsInternalServerError{}
}

/*GetAliasParamsInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetAliasParamsInternalServerError struct {
}

func (o *GetAliasParamsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /alias/parameters][%d] getAliasParamsInternalServerError ", 500)
}

func (o *GetAliasParamsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetAliasParamsOKBody get alias params o k body
swagger:model GetAliasParamsOKBody
*/
type GetAliasParamsOKBody struct {

	// height
	Height string `json:"height,omitempty"`

	// result
	Result *GetAliasParamsOKBodyResult `json:"result,omitempty"`
}

// Validate validates this get alias params o k body
func (o *GetAliasParamsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAliasParamsOKBody) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAliasParamsOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAliasParamsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAliasParamsOKBody) UnmarshalBinary(b []byte) error {
	var res GetAliasParamsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAliasParamsOKBodyResult get alias params o k body result
swagger:model GetAliasParamsOKBodyResult
*/
type GetAliasParamsOKBodyResult struct {

	// fee for alias length 2
	FeeForAliasLength2 string `json:"fee_for_alias_length_2,omitempty"`

	// fee for alias length 3
	FeeForAliasLength3 string `json:"fee_for_alias_length_3,omitempty"`

	// fee for alias length 4
	FeeForAliasLength4 string `json:"fee_for_alias_length_4,omitempty"`

	// fee for alias length 5
	FeeForAliasLength5 string `json:"fee_for_alias_length_5,omitempty"`

	// fee for alias length 6
	FeeForAliasLength6 string `json:"fee_for_alias_length_6,omitempty"`

	// fee for alias length 7 or higher
	FeeForAliasLength7OrHigher string `json:"fee_for_alias_length_7_or_higher,omitempty"`

	// max alias count
	MaxAliasCount string `json:"max_alias_count,omitempty"`
}

// Validate validates this get alias params o k body result
func (o *GetAliasParamsOKBodyResult) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAliasParamsOKBodyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAliasParamsOKBodyResult) UnmarshalBinary(b []byte) error {
	var res GetAliasParamsOKBodyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
