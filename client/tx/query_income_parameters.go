// Code generated by go-swagger; DO NOT EDIT.

package tx

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryIncomeParams creates a new QueryIncomeParams object
// with the default values initialized.
func NewQueryIncomeParams() *QueryIncomeParams {
	var ()
	return &QueryIncomeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryIncomeParamsWithTimeout creates a new QueryIncomeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryIncomeParamsWithTimeout(timeout time.Duration) *QueryIncomeParams {
	var ()
	return &QueryIncomeParams{

		timeout: timeout,
	}
}

// NewQueryIncomeParamsWithContext creates a new QueryIncomeParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryIncomeParamsWithContext(ctx context.Context) *QueryIncomeParams {
	var ()
	return &QueryIncomeParams{

		Context: ctx,
	}
}

// NewQueryIncomeParamsWithHTTPClient creates a new QueryIncomeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryIncomeParamsWithHTTPClient(client *http.Client) *QueryIncomeParams {
	var ()
	return &QueryIncomeParams{
		HTTPClient: client,
	}
}

/*QueryIncomeParams contains all the parameters to send to the API endpoint
for the query income operation typically these are written to a http.Request
*/
type QueryIncomeParams struct {

	/*Account
	  Bech32 address

	*/
	Account string
	/*Count
	  Querier count limited to 1024

	*/
	Count int32
	/*Sid
	  Sequence id

	*/
	Sid int64
	/*Time
	  Unix timestamp

	*/
	Time int64
	/*Token
	  Symbol

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query income params
func (o *QueryIncomeParams) WithTimeout(timeout time.Duration) *QueryIncomeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query income params
func (o *QueryIncomeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query income params
func (o *QueryIncomeParams) WithContext(ctx context.Context) *QueryIncomeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query income params
func (o *QueryIncomeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query income params
func (o *QueryIncomeParams) WithHTTPClient(client *http.Client) *QueryIncomeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query income params
func (o *QueryIncomeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccount adds the account to the query income params
func (o *QueryIncomeParams) WithAccount(account string) *QueryIncomeParams {
	o.SetAccount(account)
	return o
}

// SetAccount adds the account to the query income params
func (o *QueryIncomeParams) SetAccount(account string) {
	o.Account = account
}

// WithCount adds the count to the query income params
func (o *QueryIncomeParams) WithCount(count int32) *QueryIncomeParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the query income params
func (o *QueryIncomeParams) SetCount(count int32) {
	o.Count = count
}

// WithSid adds the sid to the query income params
func (o *QueryIncomeParams) WithSid(sid int64) *QueryIncomeParams {
	o.SetSid(sid)
	return o
}

// SetSid adds the sid to the query income params
func (o *QueryIncomeParams) SetSid(sid int64) {
	o.Sid = sid
}

// WithTime adds the time to the query income params
func (o *QueryIncomeParams) WithTime(time int64) *QueryIncomeParams {
	o.SetTime(time)
	return o
}

// SetTime adds the time to the query income params
func (o *QueryIncomeParams) SetTime(time int64) {
	o.Time = time
}

// WithToken adds the token to the query income params
func (o *QueryIncomeParams) WithToken(token *string) *QueryIncomeParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the query income params
func (o *QueryIncomeParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *QueryIncomeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param account
	qrAccount := o.Account
	qAccount := qrAccount
	if qAccount != "" {
		if err := r.SetQueryParam("account", qAccount); err != nil {
			return err
		}
	}

	// query param count
	qrCount := o.Count
	qCount := swag.FormatInt32(qrCount)
	if qCount != "" {
		if err := r.SetQueryParam("count", qCount); err != nil {
			return err
		}
	}

	// query param sid
	qrSid := o.Sid
	qSid := swag.FormatInt64(qrSid)
	if qSid != "" {
		if err := r.SetQueryParam("sid", qSid); err != nil {
			return err
		}
	}

	// query param time
	qrTime := o.Time
	qTime := swag.FormatInt64(qrTime)
	if qTime != "" {
		if err := r.SetQueryParam("time", qTime); err != nil {
			return err
		}
	}

	if o.Token != nil {

		// query param token
		var qrToken string
		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {
			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
