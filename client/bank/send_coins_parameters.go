// Code generated by go-swagger; DO NOT EDIT.

package bank

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSendCoinsParams creates a new SendCoinsParams object
// with the default values initialized.
func NewSendCoinsParams() *SendCoinsParams {
	var ()
	return &SendCoinsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSendCoinsParamsWithTimeout creates a new SendCoinsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSendCoinsParamsWithTimeout(timeout time.Duration) *SendCoinsParams {
	var ()
	return &SendCoinsParams{

		timeout: timeout,
	}
}

// NewSendCoinsParamsWithContext creates a new SendCoinsParams object
// with the default values initialized, and the ability to set a context for a request
func NewSendCoinsParamsWithContext(ctx context.Context) *SendCoinsParams {
	var ()
	return &SendCoinsParams{

		Context: ctx,
	}
}

// NewSendCoinsParamsWithHTTPClient creates a new SendCoinsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSendCoinsParamsWithHTTPClient(client *http.Client) *SendCoinsParams {
	var ()
	return &SendCoinsParams{
		HTTPClient: client,
	}
}

/*SendCoinsParams contains all the parameters to send to the API endpoint
for the send coins operation typically these are written to a http.Request
*/
type SendCoinsParams struct {

	/*Account
	  The sender and tx information

	*/
	Account SendCoinsBody
	/*Address
	  Account address in bech32 format

	*/
	Address string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the send coins params
func (o *SendCoinsParams) WithTimeout(timeout time.Duration) *SendCoinsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the send coins params
func (o *SendCoinsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the send coins params
func (o *SendCoinsParams) WithContext(ctx context.Context) *SendCoinsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the send coins params
func (o *SendCoinsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the send coins params
func (o *SendCoinsParams) WithHTTPClient(client *http.Client) *SendCoinsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the send coins params
func (o *SendCoinsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccount adds the account to the send coins params
func (o *SendCoinsParams) WithAccount(account SendCoinsBody) *SendCoinsParams {
	o.SetAccount(account)
	return o
}

// SetAccount adds the account to the send coins params
func (o *SendCoinsParams) SetAccount(account SendCoinsBody) {
	o.Account = account
}

// WithAddress adds the address to the send coins params
func (o *SendCoinsParams) WithAddress(address string) *SendCoinsParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the send coins params
func (o *SendCoinsParams) SetAddress(address string) {
	o.Address = address
}

// WriteToRequest writes these params to a swagger request
func (o *SendCoinsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Account); err != nil {
		return err
	}

	// path param address
	if err := r.SetPathParam("address", o.Address); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
