// Code generated by go-swagger; DO NOT EDIT.

package bank

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/coinexchain/dex-api-go/models"
)

// SendCoinsReader is a Reader for the SendCoins structure.
type SendCoinsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendCoinsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSendCoinsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSendCoinsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSendCoinsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSendCoinsOK creates a SendCoinsOK with default headers values
func NewSendCoinsOK() *SendCoinsOK {
	return &SendCoinsOK{}
}

/*SendCoinsOK handles this case with default header values.

Tx was succesfully generated
*/
type SendCoinsOK struct {
	Payload *models.StdTx
}

func (o *SendCoinsOK) Error() string {
	return fmt.Sprintf("[POST /bank/accounts/{address}/transfers][%d] sendCoinsOK  %+v", 200, o.Payload)
}

func (o *SendCoinsOK) GetPayload() *models.StdTx {
	return o.Payload
}

func (o *SendCoinsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StdTx)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendCoinsBadRequest creates a SendCoinsBadRequest with default headers values
func NewSendCoinsBadRequest() *SendCoinsBadRequest {
	return &SendCoinsBadRequest{}
}

/*SendCoinsBadRequest handles this case with default header values.

Invalid request
*/
type SendCoinsBadRequest struct {
}

func (o *SendCoinsBadRequest) Error() string {
	return fmt.Sprintf("[POST /bank/accounts/{address}/transfers][%d] sendCoinsBadRequest ", 400)
}

func (o *SendCoinsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSendCoinsInternalServerError creates a SendCoinsInternalServerError with default headers values
func NewSendCoinsInternalServerError() *SendCoinsInternalServerError {
	return &SendCoinsInternalServerError{}
}

/*SendCoinsInternalServerError handles this case with default header values.

Server internal error
*/
type SendCoinsInternalServerError struct {
}

func (o *SendCoinsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /bank/accounts/{address}/transfers][%d] sendCoinsInternalServerError ", 500)
}

func (o *SendCoinsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*SendCoinsBody send coins body
swagger:model SendCoinsBody
*/
type SendCoinsBody struct {

	// amount
	// Required: true
	Amount []*models.Coin `json:"amount"`

	// base req
	// Required: true
	BaseReq *models.BaseReq `json:"base_req"`

	// unlock time
	// Required: true
	UnlockTime *string `json:"unlock_time"`
}

// Validate validates this send coins body
func (o *SendCoinsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnlockTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SendCoinsBody) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("account"+"."+"amount", "body", o.Amount); err != nil {
		return err
	}

	for i := 0; i < len(o.Amount); i++ {
		if swag.IsZero(o.Amount[i]) { // not required
			continue
		}

		if o.Amount[i] != nil {
			if err := o.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("account" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SendCoinsBody) validateBaseReq(formats strfmt.Registry) error {

	if err := validate.Required("account"+"."+"base_req", "body", o.BaseReq); err != nil {
		return err
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

func (o *SendCoinsBody) validateUnlockTime(formats strfmt.Registry) error {

	if err := validate.Required("account"+"."+"unlock_time", "body", o.UnlockTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SendCoinsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendCoinsBody) UnmarshalBinary(b []byte) error {
	var res SendCoinsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
